{
    "openapi" : "3.0.1",
    "info" : {
      "title" : "OpenMetadata Apis",
      "description" : "# Overview\n\nOpenMetadata supports REST APIs for getting metadata in and out of metadata store. The API resources are grouped under following categories:\n- **Data assets** - includes resources for data entities, such as `databases`, `tables`, and `topics`. Resources for data assets created from data, such as `dashboards`, `reports`, `metrics`, and `ML Features` are part of this collection. `pipelines`, `notebooks`, etc. that are used for creating data assets are also available as resources as of this collection.\n- **Teams and Users** - includes `users`, `teams`, a special type of user called `bots` that performs many automated tasks such as ingestion.\n- **Services** - are services that OpenMetadata integrates with. Currently `databaseService` is the only service under this collection that represents data sources. In the future, services related to Dashboards, Reports, ETL pipelines will be added under this collection.\n- **Glossary** - OpenMetadata supports hierarchical tags that can be used to build business vocabulary to describe and classify data available under `tags` resource.\n",
      "contact" : {
        "name" : "OpenMetadata",
        "url" : "https://open-metadata.org",
        "email" : "openmetadata-dev@googlegroups.com"
      },
      "license" : {
        "name" : "Apache 2.0",
        "url" : "https://www.apache.org/licenses/LICENSE-2.0"
      },
      "version" : "0.11.0"
    },
    "servers" : [ {
      "url" : "http://localhost:8585/api",
      "description" : "Endpoint URL"
    } ],
    "paths" : {
      "/v1" : {
        "get" : {
          "tags" : [ "catalog" ],
          "summary" : "List all collections",
          "description" : "List all the collections supported by OpenMetadata. This list provides all the collections and resource REST endpoints.",
          "operationId" : "listCollections",
          "responses" : {
            "200" : {
              "description" : "All collections",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/CollectionList"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/bots" : {
        "get" : {
          "tags" : [ "bots" ],
          "summary" : "List Bot",
          "description" : "Get a list of Bot.",
          "operationId" : "listBots",
          "parameters" : [ {
            "name" : "limit",
            "in" : "query",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of Bot before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of Bot after this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of Bot",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/BotList"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "bots" ],
          "summary" : "Create or update a bot",
          "description" : "Create a bot, if it does not exist. If a bot already exists, update the bot.",
          "operationId" : "createOrUpdateBot",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateBot"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The bot",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Bot"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        },
        "post" : {
          "tags" : [ "bots" ],
          "summary" : "Create a bot",
          "description" : "Create a new bot.",
          "operationId" : "createBot",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateBot"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The bot ",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Bot"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/bots/name/{fqn}" : {
        "get" : {
          "tags" : [ "bots" ],
          "summary" : "Get a bot by name",
          "description" : "Get a bot by name.",
          "operationId" : "getBotByFQN",
          "parameters" : [ {
            "name" : "fqn",
            "in" : "path",
            "description" : "Fully qualified name of the table",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "bot",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Bot"
                  }
                }
              }
            },
            "404" : {
              "description" : "Bot for instance {name} is not found"
            }
          }
        }
      },
      "/v1/bots/{id}" : {
        "get" : {
          "tags" : [ "bots" ],
          "summary" : "Get a bot",
          "description" : "Get a bot by `id`.",
          "operationId" : "getBotByID",
          "parameters" : [ {
            "name" : "include",
            "in" : "query",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          }, {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The bot",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Bot"
                  }
                }
              }
            },
            "404" : {
              "description" : "Bot for instance {id} is not found"
            }
          }
        },
        "delete" : {
          "tags" : [ "bots" ],
          "summary" : "Delete a bot",
          "description" : "Delete a bot by `id`.",
          "operationId" : "deleteBot",
          "parameters" : [ {
            "name" : "hardDelete",
            "in" : "query",
            "description" : "Hard delete the entity. (Default = `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the Bot",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "Bot for instance {id} is not found"
            }
          }
        },
        "patch" : {
          "tags" : [ "bots" ],
          "summary" : "Update a bot",
          "description" : "Update an existing bot using JsonPatch.",
          "externalDocs" : {
            "description" : "JsonPatch RFC",
            "url" : "https://tools.ietf.org/html/rfc6902"
          },
          "operationId" : "patchBot",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the bot",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "JsonPatch with array of operations",
            "content" : {
              "application/json-patch+json" : {
                "schema" : {
                  "type" : "object"
                },
                "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
              }
            }
          },
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/bots/{id}/versions" : {
        "get" : {
          "tags" : [ "bots" ],
          "summary" : "List bot versions",
          "description" : "Get a list of all the versions of a bot identified by `id`",
          "operationId" : "listAllBotVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "bot Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of bot versions",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityHistory"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/bots/{id}/versions/{version}" : {
        "get" : {
          "tags" : [ "bots" ],
          "summary" : "Get a version of the bot",
          "description" : "Get a version of the bot by given `id`",
          "operationId" : "listSpecificBotVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "bot Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "version",
            "in" : "path",
            "description" : "bot version number in the form `major`.`minor`",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "0.1 or 1.1"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "bot",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Bot"
                  }
                }
              }
            },
            "404" : {
              "description" : "Bot for instance {id} and version {version} is not found"
            }
          }
        }
      },
      "/v1/charts" : {
        "get" : {
          "tags" : [ "charts" ],
          "summary" : "List charts",
          "description" : "Get a list of charts, optionally filtered by `service` it belongs to. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
          "operationId" : "listCharts",
          "parameters" : [ {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,followers,tags"
            }
          }, {
            "name" : "service",
            "in" : "query",
            "description" : "Filter charts by service name",
            "schema" : {
              "type" : "string",
              "example" : "superset"
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "description" : "Limit the number charts returned. (1 to 1000000, default = 10)",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of charts before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of charts after this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of charts",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ChartList"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "charts" ],
          "summary" : "Create or update chart",
          "description" : "Create a chart, it it does not exist or update an existing chart.",
          "operationId" : "createOrUpdateChart",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateChart"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The updated chart ",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Chart"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "charts" ],
          "summary" : "Create a chart",
          "description" : "Create a chart under an existing `service`.",
          "operationId" : "createChart",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateChart"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The chart",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Chart"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/charts/name/{fqn}" : {
        "get" : {
          "tags" : [ "charts" ],
          "summary" : "Get a chart by name",
          "description" : "Get a chart by fully qualified name.",
          "operationId" : "getChartByFQN",
          "parameters" : [ {
            "name" : "fqn",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,followers,tags"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The chart",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Chart"
                  }
                }
              }
            },
            "404" : {
              "description" : "Chart for instance {id} is not found"
            }
          }
        }
      },
      "/v1/charts/{id}" : {
        "get" : {
          "tags" : [ "charts" ],
          "summary" : "Get a Chart",
          "description" : "Get a chart by `id`.",
          "operationId" : "getChartByID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,followers,tags"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The chart",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Chart"
                  }
                }
              }
            },
            "404" : {
              "description" : "Chart for instance {id} is not found"
            }
          }
        },
        "delete" : {
          "tags" : [ "charts" ],
          "summary" : "Delete a Chart",
          "description" : "Delete a chart by `id`.",
          "operationId" : "deleteChart",
          "parameters" : [ {
            "name" : "hardDelete",
            "in" : "query",
            "description" : "Hard delete the entity. (Default = `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Chart Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "Chart for instance {id} is not found"
            }
          }
        },
        "patch" : {
          "tags" : [ "charts" ],
          "summary" : "Update a chart",
          "description" : "Update an existing chart using JsonPatch.",
          "externalDocs" : {
            "description" : "JsonPatch RFC",
            "url" : "https://tools.ietf.org/html/rfc6902"
          },
          "operationId" : "patchChart",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "JsonPatch with array of operations",
            "content" : {
              "application/json-patch+json" : {
                "schema" : {
                  "type" : "object"
                },
                "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
              }
            }
          },
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/charts/{id}/followers" : {
        "put" : {
          "tags" : [ "charts" ],
          "summary" : "Add a follower",
          "description" : "Add a user identified by `userId` as followed of this chart",
          "operationId" : "addFollowerToChart",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the chart",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "Id of the user to be added as follower",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "Chart for instance {id} is not found"
            }
          }
        }
      },
      "/v1/charts/{id}/followers/{userId}" : {
        "delete" : {
          "tags" : [ "charts" ],
          "summary" : "Remove a follower",
          "description" : "Remove the user identified `userId` as a follower of the chart.",
          "operationId" : "deleteFollowerFromChart",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the chart",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "userId",
            "in" : "path",
            "description" : "Id of the user being removed as follower",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/charts/{id}/versions" : {
        "get" : {
          "tags" : [ "charts" ],
          "summary" : "List chart versions",
          "description" : "Get a list of all the versions of a chart identified by `id`",
          "operationId" : "listAllChartVersions",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Chart Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of chart versions",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityHistory"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/charts/{id}/versions/{version}" : {
        "get" : {
          "tags" : [ "charts" ],
          "summary" : "Get a version of the chart",
          "description" : "Get a version of the chart by given `id`",
          "operationId" : "getSpecificChartVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Chart Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "version",
            "in" : "path",
            "description" : "Chart version number in the form `major`.`minor`",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "0.1 or 1.1"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "chart",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Chart"
                  }
                }
              }
            },
            "404" : {
              "description" : "Chart for instance {id} and version {version} is not found"
            }
          }
        }
      },
      "/v1/config/airflow" : {
        "get" : {
          "tags" : [ "config" ],
          "summary" : "Get airflow configuration",
          "operationId" : "getAirflowConfiguration",
          "responses" : {
            "200" : {
              "description" : "Airflow configuration",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/AirflowConfigurationForAPI"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/config/auth" : {
        "get" : {
          "tags" : [ "config" ],
          "summary" : "Get auth configuration",
          "operationId" : "getAuthConfiguration",
          "responses" : {
            "200" : {
              "description" : "Auth configuration",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/AuthenticationConfiguration"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/config/authorizer" : {
        "get" : {
          "tags" : [ "config" ],
          "summary" : "Get authorizer configuration",
          "operationId" : "getAuthorizerConfig",
          "responses" : {
            "200" : {
              "description" : "Authorizer configuration",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/AuthorizerConfiguration"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/config/jwks" : {
        "get" : {
          "tags" : [ "config" ],
          "summary" : "Get JWKS public key",
          "operationId" : "getJWKSResponse",
          "responses" : {
            "200" : {
              "description" : "JWKS public key",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/JWKSResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/config/sandbox" : {
        "get" : {
          "tags" : [ "config" ],
          "summary" : "Get sandbox mode",
          "operationId" : "getSandboxConfiguration",
          "responses" : {
            "200" : {
              "description" : "Sandbox mode",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/SandboxConfiguration"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/dashboards" : {
        "get" : {
          "tags" : [ "dashboards" ],
          "summary" : "List Dashboards",
          "description" : "Get a list of dashboards, optionally filtered by `service` it belongs to. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
          "operationId" : "listDashboards",
          "parameters" : [ {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,charts,followers,tags,usageSummary"
            }
          }, {
            "name" : "service",
            "in" : "query",
            "description" : "Filter dashboards by service name",
            "schema" : {
              "type" : "string",
              "example" : "superset"
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "description" : "Limit the number dashboards returned. (1 to 1000000, default = 10)",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of dashboards before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of dashboards after this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of dashboards",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/DashboardList"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "dashboards" ],
          "summary" : "Create or update a dashboard",
          "description" : "Create a new dashboard, if it does not exist or update an existing dashboard.",
          "operationId" : "createOrUpdateDashboard",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateDashboard"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The dashboard",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Dashboard"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        },
        "post" : {
          "tags" : [ "dashboards" ],
          "summary" : "Create a dashboard",
          "description" : "Create a new dashboard.",
          "operationId" : "createDashboard",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateDashboard"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The dashboard",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Dashboard"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/dashboards/name/{fqn}" : {
        "get" : {
          "tags" : [ "dashboards" ],
          "summary" : "Get a dashboard by name",
          "description" : "Get a dashboard by fully qualified name.",
          "operationId" : "getDashboardByFQN",
          "parameters" : [ {
            "name" : "fqn",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,charts,followers,tags,usageSummary"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The dashboard",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Dashboard"
                  }
                }
              }
            },
            "404" : {
              "description" : "Dashboard for instance {id} is not found"
            }
          }
        }
      },
      "/v1/dashboards/{id}" : {
        "get" : {
          "tags" : [ "dashboards" ],
          "summary" : "Get a dashboard",
          "description" : "Get a dashboard by `id`.",
          "operationId" : "getDashboardByID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,charts,followers,tags,usageSummary"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The dashboard",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Dashboard"
                  }
                }
              }
            },
            "404" : {
              "description" : "Dashboard for instance {id} is not found"
            }
          }
        },
        "delete" : {
          "tags" : [ "dashboards" ],
          "summary" : "Delete a Dashboard",
          "description" : "Delete a dashboard by `id`.",
          "operationId" : "deleteDashboard",
          "parameters" : [ {
            "name" : "hardDelete",
            "in" : "query",
            "description" : "Hard delete the entity. (Default = `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Dashboard Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "Dashboard for instance {id} is not found"
            }
          }
        },
        "patch" : {
          "tags" : [ "dashboards" ],
          "summary" : "Update a Dashboard",
          "description" : "Update an existing dashboard using JsonPatch.",
          "externalDocs" : {
            "description" : "JsonPatch RFC",
            "url" : "https://tools.ietf.org/html/rfc6902"
          },
          "operationId" : "patchDashboard",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "JsonPatch with array of operations",
            "content" : {
              "application/json-patch+json" : {
                "schema" : {
                  "type" : "object"
                },
                "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
              }
            }
          },
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/dashboards/{id}/followers" : {
        "put" : {
          "tags" : [ "dashboards" ],
          "summary" : "Add a follower",
          "description" : "Add a user identified by `userId` as follower of this dashboard",
          "operationId" : "addFollowerToDashboard",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the dashboard",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "Id of the user to be added as follower",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "Dashboard for instance {id} is not found"
            }
          }
        }
      },
      "/v1/dashboards/{id}/followers/{userId}" : {
        "delete" : {
          "tags" : [ "dashboards" ],
          "summary" : "Remove a follower",
          "description" : "Remove the user identified `userId` as a follower of the dashboard.",
          "operationId" : "removeFollowerFromDashboard",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the dashboard",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "userId",
            "in" : "path",
            "description" : "Id of the user being removed as follower",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/dashboards/{id}/versions" : {
        "get" : {
          "tags" : [ "dashboards" ],
          "summary" : "List dashboard versions",
          "description" : "Get a list of all the versions of a dashboard identified by `id`",
          "operationId" : "listAllDashboardVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Dashboard Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of dashboard versions",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityHistory"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/dashboards/{id}/versions/{version}" : {
        "get" : {
          "tags" : [ "dashboards" ],
          "summary" : "Get a version of the dashboard",
          "description" : "Get a version of the dashboard by given `id`",
          "operationId" : "getSpecificDashboardVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Dashboard Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "version",
            "in" : "path",
            "description" : "Dashboard version number in the form `major`.`minor`",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "0.1 or 1.1"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "dashboard",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Dashboard"
                  }
                }
              }
            },
            "404" : {
              "description" : "Dashboard for instance {id} and version {version} is not found"
            }
          }
        }
      },
      "/v1/databaseSchemas" : {
        "get" : {
          "tags" : [ "databaseSchemas" ],
          "summary" : "List database schemas",
          "description" : "Get a list of database schemas, optionally filtered by `database` it belongs to. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
          "operationId" : "listDBSchemas",
          "parameters" : [ {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,tables,usageSummary"
            }
          }, {
            "name" : "database",
            "in" : "query",
            "description" : "Filter schemas by database name",
            "schema" : {
              "type" : "string",
              "example" : "customerDatabase"
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "description" : "Limit the number schemas returned. (1 to 1000000, default = 10)",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of schemas before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of schemas after this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of database schema",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/DatabaseSchemaList"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "databaseSchemas" ],
          "summary" : "Create or update schema",
          "description" : "Create a database schema, if it does not exist or update an existing database schema.",
          "operationId" : "createOrUpdateDBSchema",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateDatabaseSchema"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The updated schema ",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/DatabaseSchema"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "databaseSchemas" ],
          "summary" : "Create a schema",
          "description" : "Create a schema under an existing `service`.",
          "operationId" : "createDBSchema",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateDatabaseSchema"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The database schema",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/DatabaseSchema"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/databaseSchemas/name/{fqn}" : {
        "get" : {
          "tags" : [ "databaseSchemas" ],
          "summary" : "Get a schema by name",
          "description" : "Get a database schema by fully qualified name.",
          "operationId" : "getDBSchemaByFQN",
          "parameters" : [ {
            "name" : "fqn",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,tables,usageSummary"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The schema",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/DatabaseSchema"
                  }
                }
              }
            },
            "404" : {
              "description" : "Database schema for instance {id} is not found"
            }
          }
        }
      },
      "/v1/databaseSchemas/{id}" : {
        "get" : {
          "tags" : [ "databaseSchemas" ],
          "summary" : "Get a schema",
          "description" : "Get a database schema by `id`.",
          "operationId" : "getDBSchemaByID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,tables,usageSummary"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The schema",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/DatabaseSchema"
                  }
                }
              }
            },
            "404" : {
              "description" : "Schema for instance {id} is not found"
            }
          }
        },
        "delete" : {
          "tags" : [ "databaseSchemas" ],
          "summary" : "Delete a schema",
          "description" : "Delete a schema by `id`. Schema can only be deleted if it has no tables.",
          "operationId" : "deleteDBSchema",
          "parameters" : [ {
            "name" : "recursive",
            "in" : "query",
            "description" : "Recursively delete this entity and it's children. (Default `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "hardDelete",
            "in" : "query",
            "description" : "Hard delete the entity. (Default = `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "Schema for instance {id} is not found"
            }
          }
        },
        "patch" : {
          "tags" : [ "databaseSchemas" ],
          "summary" : "Update a database schema",
          "description" : "Update an existing database schema using JsonPatch.",
          "externalDocs" : {
            "description" : "JsonPatch RFC",
            "url" : "https://tools.ietf.org/html/rfc6902"
          },
          "operationId" : "patchDBSchema",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "JsonPatch with array of operations",
            "content" : {
              "application/json-patch+json" : {
                "schema" : {
                  "type" : "object"
                },
                "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
              }
            }
          },
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/databaseSchemas/{id}/versions" : {
        "get" : {
          "tags" : [ "databaseSchemas" ],
          "summary" : "List schema versions",
          "description" : "Get a list of all the versions of a schema identified by `id`",
          "operationId" : "listAllDBSchemaVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Database schema Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of schema versions",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityHistory"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/databaseSchemas/{id}/versions/{version}" : {
        "get" : {
          "tags" : [ "databaseSchemas" ],
          "summary" : "Get a version of the schema",
          "description" : "Get a version of the database schema by given `id`",
          "operationId" : "getSpecificDBSchemaVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Database schema Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "version",
            "in" : "path",
            "description" : "Database schema version number in the form `major`.`minor`",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "0.1 or 1.1"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "database schema",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/DatabaseSchema"
                  }
                }
              }
            },
            "404" : {
              "description" : "Database schema for instance {id} and version {version} is not found"
            }
          }
        }
      },
      "/v1/databases" : {
        "get" : {
          "tags" : [ "databases" ],
          "summary" : "List databases",
          "description" : "Get a list of databases, optionally filtered by `service` it belongs to. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
          "operationId" : "listDatabases",
          "parameters" : [ {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,databaseSchemas,usageSummary,location"
            }
          }, {
            "name" : "service",
            "in" : "query",
            "description" : "Filter databases by service name",
            "schema" : {
              "type" : "string",
              "example" : "snowflakeWestCoast"
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "description" : "Limit the number tables returned. (1 to 1000000, default = 10)",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of tables before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of tables after this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of databases",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/DatabaseList"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "databases" ],
          "summary" : "Create or update database",
          "description" : "Create a database, if it does not exist or update an existing database.",
          "operationId" : "createOrUpdateDatabase",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateDatabase"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The updated database ",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Database"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "databases" ],
          "summary" : "Create a database",
          "description" : "Create a database under an existing `service`.",
          "operationId" : "createDatabase",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateDatabase"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The database",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Database"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/databases/name/{fqn}" : {
        "get" : {
          "tags" : [ "databases" ],
          "summary" : "Get a database by name",
          "description" : "Get a database by fully qualified name.",
          "operationId" : "getDatabaseByFQN",
          "parameters" : [ {
            "name" : "fqn",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,databaseSchemas,usageSummary,location"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The database",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Database"
                  }
                }
              }
            },
            "404" : {
              "description" : "Database for instance {id} is not found"
            }
          }
        }
      },
      "/v1/databases/{id}" : {
        "get" : {
          "tags" : [ "databases" ],
          "summary" : "Get a database",
          "description" : "Get a database by `id`.",
          "operationId" : "getDatabaseByID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,databaseSchemas,usageSummary,location"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The database",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Database"
                  }
                }
              }
            },
            "404" : {
              "description" : "Database for instance {id} is not found"
            }
          }
        },
        "delete" : {
          "tags" : [ "databases" ],
          "summary" : "Delete a database",
          "description" : "Delete a database by `id`. Database can only be deleted if it has no tables.",
          "operationId" : "deleteDatabase",
          "parameters" : [ {
            "name" : "recursive",
            "in" : "query",
            "description" : "Recursively delete this entity and it's children. (Default `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "hardDelete",
            "in" : "query",
            "description" : "Hard delete the entity. (Default = `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "Database for instance {id} is not found"
            }
          }
        },
        "patch" : {
          "tags" : [ "databases" ],
          "summary" : "Update a database",
          "description" : "Update an existing database using JsonPatch.",
          "externalDocs" : {
            "description" : "JsonPatch RFC",
            "url" : "https://tools.ietf.org/html/rfc6902"
          },
          "operationId" : "patchDatabase",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "JsonPatch with array of operations",
            "content" : {
              "application/json-patch+json" : {
                "schema" : {
                  "type" : "object"
                },
                "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
              }
            }
          },
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/databases/{id}/location" : {
        "delete" : {
          "tags" : [ "databases" ],
          "summary" : "Remove the location",
          "description" : "Remove the location",
          "operationId" : "deleteLocation",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the database",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Database"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/databases/{id}/versions" : {
        "get" : {
          "tags" : [ "databases" ],
          "summary" : "List database versions",
          "description" : "Get a list of all the versions of a database identified by `id`",
          "operationId" : "listAllDatabaseVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "database Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of database versions",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityHistory"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/databases/{id}/versions/{version}" : {
        "get" : {
          "tags" : [ "databases" ],
          "summary" : "Get a version of the database",
          "description" : "Get a version of the database by given `id`",
          "operationId" : "getSpecificDatabaseVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Database Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "version",
            "in" : "path",
            "description" : "Database version number in the form `major`.`minor`",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "0.1 or 1.1"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "database",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Database"
                  }
                }
              }
            },
            "404" : {
              "description" : "Database for instance {id} and version {version} is not found"
            }
          }
        }
      },
      "/v1/events" : {
        "get" : {
          "tags" : [ "events" ],
          "summary" : "Get change events",
          "description" : "Get a list of change events matching event types, entity type, from a given date",
          "operationId" : "listChangeEvents",
          "parameters" : [ {
            "name" : "entityCreated",
            "in" : "query",
            "description" : "List of comma separated entities requested for `entityCreated` event. When set to `*` all entities will be returned",
            "schema" : {
              "type" : "string",
              "example" : "table,dashboard,..."
            }
          }, {
            "name" : "entityUpdated",
            "in" : "query",
            "description" : "List of comma separated entities requested for `entityCreated` event. When set to `*` all entities will be returned",
            "schema" : {
              "type" : "string",
              "example" : "table,dashboard,..."
            }
          }, {
            "name" : "entityDeleted",
            "in" : "query",
            "description" : "List of comma separated entities requested for `entityCreated` event. When set to `*` all entities will be returned",
            "schema" : {
              "type" : "string",
              "example" : "table,dashboard,..."
            }
          }, {
            "name" : "timestamp",
            "in" : "query",
            "description" : "Events starting from this unix timestamp in milliseconds",
            "required" : true,
            "schema" : {
              "type" : "integer",
              "format" : "int64",
              "example" : 1426349294842
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Entity events",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ChangeEventList"
                  }
                }
              }
            },
            "404" : {
              "description" : "Entity for instance {id} is not found"
            }
          }
        }
      },
      "/v1/feed" : {
        "get" : {
          "tags" : [ "feeds" ],
          "summary" : "List threads",
          "description" : "Get a list of threads, optionally filtered by `entityLink`.",
          "operationId" : "listThreads",
          "parameters" : [ {
            "name" : "limitPosts",
            "in" : "query",
            "description" : "Limit the number of posts sorted by chronological order (1 to 1000000, default = 3)",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int64",
              "default" : 3
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "description" : "Limit the number of threads returned. (1 to 1000000, default = 10)",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of threads before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of threads after this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "entityLink",
            "in" : "query",
            "description" : "Filter threads by entity link",
            "schema" : {
              "type" : "string",
              "example" : "<E#/{entityType}/{entityFQN}/{fieldName}>"
            }
          }, {
            "name" : "userId",
            "in" : "query",
            "description" : "Filter threads by user id. This filter requires a 'filterType' query param. The default filter type is 'OWNER'. This filter cannot be combined with the entityLink filter.",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "filterType",
            "in" : "query",
            "description" : "Filter type definition for the user filter. It can take one of 'OWNER', 'FOLLOWS', 'MENTIONS'. This must be used with the 'user' query param",
            "schema" : {
              "type" : "string",
              "enum" : [ "OWNER", "MENTIONS", "FOLLOWS", "ASSIGNED_TO", "ASSIGNED_BY" ]
            }
          }, {
            "name" : "resolved",
            "in" : "query",
            "description" : "Filter threads by whether they are resolved or not. By default resolved is false",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "type",
            "in" : "query",
            "description" : "The type of thread to filter the results. It can take one of 'Conversation', 'Task', 'Announcement'",
            "schema" : {
              "type" : "string",
              "enum" : [ "Conversation", "Task", "Announcement" ]
            }
          }, {
            "name" : "taskStatus",
            "in" : "query",
            "description" : "The status of tasks to filter the results. It can take one of 'Open', 'Closed'. This filter will take effect only when threadType is set to Task",
            "schema" : {
              "type" : "string",
              "default" : "Open",
              "enum" : [ "Open", "Closed" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of threads",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ThreadList"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "feeds" ],
          "summary" : "Create a thread",
          "description" : "Create a new thread. A thread is created about a data asset when a user posts the first post.",
          "operationId" : "createThread",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateThread"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The thread",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Thread"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/feed/count" : {
        "get" : {
          "tags" : [ "feeds" ],
          "summary" : "count of threads",
          "description" : "Get a count of threads, optionally filtered by `entityLink` for each of the entities.",
          "operationId" : "countThreads",
          "parameters" : [ {
            "name" : "entityLink",
            "in" : "query",
            "description" : "Filter threads by entity link",
            "schema" : {
              "type" : "string",
              "example" : "<E#/{entityType}/{entityFQN}/{fieldName}>"
            }
          }, {
            "name" : "type",
            "in" : "query",
            "description" : "The type of thread to filter the results. It can take one of 'Conversation', 'Task', 'Announcement'",
            "schema" : {
              "type" : "string",
              "enum" : [ "Conversation", "Task", "Announcement" ]
            }
          }, {
            "name" : "isResolved",
            "in" : "query",
            "description" : "Filter threads by whether it is active or resolved",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Count of threads",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ThreadCount"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/feed/tasks/{id}" : {
        "get" : {
          "tags" : [ "feeds" ],
          "summary" : "Get a task thread by task id",
          "description" : "Get a task thread by `task id`.",
          "operationId" : "getTaskByID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The task thread",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Thread"
                  }
                }
              }
            },
            "404" : {
              "description" : "Task for instance {id} is not found"
            }
          }
        }
      },
      "/v1/feed/tasks/{id}/close" : {
        "put" : {
          "tags" : [ "feeds" ],
          "summary" : "Close a task",
          "description" : "Close a task without making any changes to the entity.",
          "operationId" : "closeTask",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloseTask"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The task thread.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Thread"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/feed/tasks/{id}/resolve" : {
        "put" : {
          "tags" : [ "feeds" ],
          "summary" : "Resolve a task",
          "description" : "Resolve a task.",
          "operationId" : "resolveTask",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResolveTask"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The task thread",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Thread"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/feed/{id}" : {
        "get" : {
          "tags" : [ "feeds" ],
          "summary" : "Get a thread",
          "description" : "Get a thread by `id`.",
          "operationId" : "getThreadByID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The thread",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Thread"
                  }
                }
              }
            },
            "404" : {
              "description" : "Thread for instance {id} is not found"
            }
          }
        },
        "patch" : {
          "tags" : [ "feeds" ],
          "summary" : "Update a thread by `id`.",
          "description" : "Update an existing thread using JsonPatch.",
          "externalDocs" : {
            "description" : "JsonPatch RFC",
            "url" : "https://tools.ietf.org/html/rfc6902"
          },
          "operationId" : "patchThread",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "JsonPatch with array of operations",
            "content" : {
              "application/json-patch+json" : {
                "schema" : {
                  "type" : "object"
                },
                "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
              }
            }
          },
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/feed/{id}/posts" : {
        "get" : {
          "tags" : [ "feeds" ],
          "summary" : "Get all the posts of a thread",
          "description" : "Get all the posts of an existing thread.",
          "operationId" : "getAllPostOfThread",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The posts of the given thread.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/PostList"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "feeds" ],
          "summary" : "Add post to a thread",
          "description" : "Add a post to an existing thread.",
          "operationId" : "addPostToThread",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePost"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The post",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Thread"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/feed/{threadId}/posts/{postId}" : {
        "delete" : {
          "tags" : [ "feeds" ],
          "summary" : "Delete a post from its thread",
          "description" : "Delete a post from an existing thread.",
          "operationId" : "deletePostFromThread",
          "parameters" : [ {
            "name" : "threadId",
            "in" : "path",
            "description" : "ThreadId of the post to be deleted",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "postId",
            "in" : "path",
            "description" : "PostId of the post to be deleted",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "post with {postId} is not found"
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        },
        "patch" : {
          "tags" : [ "feeds" ],
          "summary" : "Update post of a thread by `id`.",
          "description" : "Update a post of an existing thread using JsonPatch.",
          "externalDocs" : {
            "description" : "JsonPatch RFC",
            "url" : "https://tools.ietf.org/html/rfc6902"
          },
          "operationId" : "patchPostOfThread",
          "parameters" : [ {
            "name" : "threadId",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "postId",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "JsonPatch with array of operations",
            "content" : {
              "application/json-patch+json" : {
                "schema" : {
                  "type" : "object"
                },
                "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
              }
            }
          },
          "responses" : {
            "400" : {
              "description" : "Bad request"
            },
            "404" : {
              "description" : "post with {postId} is not found"
            }
          }
        }
      },
      "/v1/glossaries" : {
        "get" : {
          "tags" : [ "glossaries" ],
          "summary" : "List Glossaries",
          "description" : "Get a list of glossaries. Use `fields` parameter to get only necessary fields.  Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
          "operationId" : "listGlossaries",
          "parameters" : [ {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,tags,reviewers,usageCount"
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "description" : "Limit the number glossaries returned. (1 to 1000000, default = 10)",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of glossaries before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of glossaries after this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of glossaries",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/GlossaryList"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "glossaries" ],
          "summary" : "Create or update a glossary",
          "description" : "Create a new glossary, if it does not exist or update an existing glossary.",
          "operationId" : "createOrUpdateGlossary",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateGlossary"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The glossary",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Glossary"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        },
        "post" : {
          "tags" : [ "glossaries" ],
          "summary" : "Create a glossary",
          "description" : "Create a new glossary.",
          "operationId" : "createGlossary",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateGlossary"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The glossary",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Glossary"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/glossaries/name/{name}" : {
        "get" : {
          "tags" : [ "glossaries" ],
          "summary" : "Get a glossary by name",
          "description" : "Get a glossary by name.",
          "operationId" : "getGlossaryByFQN",
          "parameters" : [ {
            "name" : "name",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,tags,reviewers,usageCount"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The glossary",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Glossary"
                  }
                }
              }
            },
            "404" : {
              "description" : "Glossary for instance {id} is not found"
            }
          }
        }
      },
      "/v1/glossaries/{id}" : {
        "get" : {
          "tags" : [ "glossaries" ],
          "summary" : "Get a glossary",
          "description" : "Get a glossary by `id`.",
          "operationId" : "getGlossaryByID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,tags,reviewers,usageCount"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The glossary",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Glossary"
                  }
                }
              }
            },
            "404" : {
              "description" : "Glossary for instance {id} is not found"
            }
          }
        },
        "delete" : {
          "tags" : [ "glossaries" ],
          "summary" : "Delete a Glossary",
          "description" : "Delete a glossary by `id`.",
          "operationId" : "deleteGlossary",
          "parameters" : [ {
            "name" : "recursive",
            "in" : "query",
            "description" : "Recursively delete this entity and it's children. (Default `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "hardDelete",
            "in" : "query",
            "description" : "Hard delete the entity. (Default = `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Glossary Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "glossary for instance {id} is not found"
            }
          }
        },
        "patch" : {
          "tags" : [ "glossaries" ],
          "summary" : "Update a glossary",
          "description" : "Update an existing glossary using JsonPatch.",
          "externalDocs" : {
            "description" : "JsonPatch RFC",
            "url" : "https://tools.ietf.org/html/rfc6902"
          },
          "operationId" : "patchGlossary",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "JsonPatch with array of operations",
            "content" : {
              "application/json-patch+json" : {
                "schema" : {
                  "type" : "object"
                },
                "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
              }
            }
          },
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/glossaries/{id}/versions" : {
        "get" : {
          "tags" : [ "glossaries" ],
          "summary" : "List glossary versions",
          "description" : "Get a list of all the versions of a glossary identified by `id`",
          "operationId" : "listAllGlossaryVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "glossary Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of glossary versions",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityHistory"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/glossaries/{id}/versions/{version}" : {
        "get" : {
          "tags" : [ "glossaries" ],
          "summary" : "Get a version of the glossaries",
          "description" : "Get a version of the glossary by given `id`",
          "operationId" : "getSpecificGlossaryVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "glossary Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "version",
            "in" : "path",
            "description" : "glossary version number in the form `major`.`minor`",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "0.1 or 1.1"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "glossaries",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Glossary"
                  }
                }
              }
            },
            "404" : {
              "description" : "Glossary for instance {id} and version {version} is not found"
            }
          }
        }
      },
      "/v1/glossaryTerms" : {
        "get" : {
          "tags" : [ "glossaryTerm" ],
          "summary" : "List glossary terms",
          "description" : "Get a list of glossary terms. Use `fields` parameter to get only necessary fields.  Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
          "operationId" : "listGlossaryTerm",
          "parameters" : [ {
            "name" : "glossary",
            "in" : "query",
            "description" : "List glossary terms filtered by glossary identified by Id given in `glossary` parameter.",
            "schema" : {
              "type" : "string",
              "example" : "children,relatedTerms,reviewers,tags,usageCount"
            }
          }, {
            "name" : "parent",
            "in" : "query",
            "description" : "List glossary terms filtered by children of glossary term identified by Id given in `parent` parameter.",
            "schema" : {
              "type" : "string",
              "example" : "children,relatedTerms,reviewers,tags,usageCount"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "children,relatedTerms,reviewers,tags,usageCount"
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "description" : "Limit the number glossary terms returned. (1 to 1000000, default = 10)",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of glossary terms before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of glossary terms after this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of glossary terms",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/GlossaryTermList"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "glossaryTerm" ],
          "summary" : "Create or update a glossary term",
          "description" : "Create a new glossary term, if it does not exist or update an existing glossary term.",
          "operationId" : "createOrUpdateGlossaryTerm",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateGlossaryTerm"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The glossary",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/GlossaryTerm"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        },
        "post" : {
          "tags" : [ "glossaryTerm" ],
          "summary" : "Create a glossary term",
          "description" : "Create a new glossary term.",
          "operationId" : "createGlossaryTerm",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateGlossaryTerm"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The glossary term",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/GlossaryTerm"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/glossaryTerms/name/{name}" : {
        "get" : {
          "tags" : [ "glossaryTerm" ],
          "summary" : "Get a glossary term by name",
          "description" : "Get a glossary term by name.",
          "operationId" : "getGlossaryTermByFQN",
          "parameters" : [ {
            "name" : "name",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "children,relatedTerms,reviewers,tags,usageCount"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The glossary term",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Glossary"
                  }
                }
              }
            },
            "404" : {
              "description" : "Glossary for instance {id} is not found"
            }
          }
        }
      },
      "/v1/glossaryTerms/{id}" : {
        "get" : {
          "tags" : [ "glossaryTerm" ],
          "summary" : "Get a glossary term",
          "description" : "Get a glossary term by `id`.",
          "operationId" : "getGlossaryTermByID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "children,relatedTerms,reviewers,tags,usageCount"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The glossary term",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Glossary"
                  }
                }
              }
            },
            "404" : {
              "description" : "Glossary for instance {id} is not found"
            }
          }
        },
        "delete" : {
          "tags" : [ "glossaryTerm" ],
          "summary" : "Delete a glossary term",
          "description" : "Delete a glossary term by `id`.",
          "operationId" : "delete",
          "parameters" : [ {
            "name" : "recursive",
            "in" : "query",
            "description" : "Recursively delete this entity and it's children. (Default `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "hardDelete",
            "in" : "query",
            "description" : "Hard delete the entity. (Default = `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Glossary Term Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "glossaryTerm for instance {id} is not found"
            }
          }
        },
        "patch" : {
          "tags" : [ "glossaryTerm" ],
          "summary" : "Update a glossary term",
          "description" : "Update an existing glossary term using JsonPatch.",
          "externalDocs" : {
            "description" : "JsonPatch RFC",
            "url" : "https://tools.ietf.org/html/rfc6902"
          },
          "operationId" : "patchGlossaryTerm",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "JsonPatch with array of operations",
            "content" : {
              "application/json-patch+json" : {
                "schema" : {
                  "type" : "object"
                },
                "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
              }
            }
          },
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/glossaryTerms/{id}/versions" : {
        "get" : {
          "tags" : [ "glossaryTerm" ],
          "summary" : "List glossary term versions",
          "description" : "Get a list of all the versions of a glossary terms identified by `id`",
          "operationId" : "listAllGlossaryTermVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "glossary Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of glossary term versions",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityHistory"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/glossaryTerms/{id}/versions/{version}" : {
        "get" : {
          "tags" : [ "glossaryTerm" ],
          "summary" : "Get a version of the glossary term",
          "description" : "Get a version of the glossary term by given `id`",
          "operationId" : "getSpecificGlossaryTermVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "glossary Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "version",
            "in" : "path",
            "description" : "glossary term version number in the form `major`.`minor`",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "0.1 or 1.1"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "glossaries",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Glossary"
                  }
                }
              }
            },
            "404" : {
              "description" : "Glossary for instance {id} and version {version} is not found"
            }
          }
        }
      },
      "/v1/lineage" : {
        "put" : {
          "tags" : [ "lineage" ],
          "summary" : "Add a lineage edge",
          "description" : "Add a lineage edge with from entity as upstream node and to entity as downstream node.",
          "operationId" : "addLineageEdge",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AddLineage"
                }
              }
            }
          },
          "responses" : {
            "404" : {
              "description" : "Entity for instance {id} is not found"
            }
          }
        }
      },
      "/v1/lineage/{entity}/name/{fqn}" : {
        "get" : {
          "tags" : [ "lineage" ],
          "summary" : "Get lineage by name",
          "description" : "Get lineage details for an entity identified by fully qualified name.",
          "operationId" : "getLineageByFQN",
          "parameters" : [ {
            "name" : "entity",
            "in" : "path",
            "description" : "Entity type for which lineage is requested",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "table, report, metrics, or dashboard"
            }
          }, {
            "name" : "fqn",
            "in" : "path",
            "description" : "Fully qualified name of the entity that uniquely identifies an entity",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "upstreamDepth",
            "in" : "query",
            "description" : "Upstream depth of lineage (default=1, min=0, max=3)",
            "schema" : {
              "maximum" : 3,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "downstreamDepth",
            "in" : "query",
            "description" : "Upstream depth of lineage (default=1, min=0, max=3)",
            "schema" : {
              "maximum" : 3,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Entity lineage",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityLineage"
                  }
                }
              }
            },
            "404" : {
              "description" : "Entity for instance {id} is not found"
            }
          }
        }
      },
      "/v1/lineage/{entity}/{id}" : {
        "get" : {
          "tags" : [ "lineage" ],
          "summary" : "Get lineage",
          "description" : "Get lineage details for an entity identified by `id`.",
          "operationId" : "getLineage",
          "parameters" : [ {
            "name" : "entity",
            "in" : "path",
            "description" : "Entity type for which lineage is requested",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "table, report, metrics, or dashboard"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Entity id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "upstreamDepth",
            "in" : "query",
            "description" : "Upstream depth of lineage (default=1, min=0, max=3)",
            "schema" : {
              "maximum" : 3,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "downstreamDepth",
            "in" : "query",
            "description" : "Upstream depth of lineage (default=1, min=0, max=3)",
            "schema" : {
              "maximum" : 3,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Entity lineage",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityLineage"
                  }
                }
              }
            },
            "404" : {
              "description" : "Entity for instance {id} is not found"
            }
          }
        }
      },
      "/v1/lineage/{fromEntity}/{fromId}/{toEntity}/{toId}" : {
        "delete" : {
          "tags" : [ "lineage" ],
          "summary" : "Delete a lineage edge",
          "description" : "Delete a lineage edge with from entity as upstream node and to entity as downstream node.",
          "operationId" : "deleteLineageEdge",
          "parameters" : [ {
            "name" : "fromEntity",
            "in" : "path",
            "description" : "Entity type of upstream entity of the edge",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "table, report, metrics, or dashboard"
            }
          }, {
            "name" : "fromId",
            "in" : "path",
            "description" : "Entity id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "toEntity",
            "in" : "path",
            "description" : "Entity type for downstream entity of the edge",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "table, report, metrics, or dashboard"
            }
          }, {
            "name" : "toId",
            "in" : "path",
            "description" : "Entity id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "404" : {
              "description" : "Entity for instance {id} is not found"
            }
          }
        }
      },
      "/v1/locations" : {
        "get" : {
          "tags" : [ "locations" ],
          "summary" : "List locations",
          "description" : "Get a list of locations, optionally filtered by `service` it belongs to. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
          "operationId" : "listLocations",
          "parameters" : [ {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,followers,tags,path"
            }
          }, {
            "name" : "service",
            "in" : "query",
            "description" : "Filter locations by prefix of the FQN",
            "schema" : {
              "type" : "string",
              "example" : "s3://bucket/folder1"
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "description" : "Limit the number locations returned. (1 to 1000000, default = 10)",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of locations before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of locations after this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of locations",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/LocationList"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "locations" ],
          "summary" : "Create or update location",
          "description" : "Create a location, it it does not exist or update an existing location.",
          "operationId" : "createOrUpdateLocation",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateLocation"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The updated location ",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Location"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        },
        "post" : {
          "tags" : [ "locations" ],
          "summary" : "Create a location",
          "description" : "Create a location under an existing `service`.",
          "operationId" : "createLocation",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateLocation"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The location",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Location"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/locations/name/{fqn}" : {
        "get" : {
          "tags" : [ "locations" ],
          "summary" : "Get a location by name",
          "description" : "Get a location by fully qualified name.",
          "operationId" : "getLocationByFQN",
          "parameters" : [ {
            "name" : "fqn",
            "in" : "path",
            "description" : "Fully qualified name of the location urlencoded if needed",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,followers,tags,path"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The location",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Location"
                  }
                }
              }
            },
            "404" : {
              "description" : "Location for instance {id} is not found"
            }
          }
        }
      },
      "/v1/locations/prefixes/{fqn}" : {
        "get" : {
          "tags" : [ "locations" ],
          "summary" : "List locations that are prefixes",
          "description" : "Get a list of locations. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
          "operationId" : "listLocationPrefixes",
          "parameters" : [ {
            "name" : "fqn",
            "in" : "path",
            "description" : "Fully qualified name of the location urlencoded if needed",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,followers,tags,path"
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "description" : "Limit the number locations returned. (1 to 1000000, default = 10)",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of locations before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of locations after this cursor",
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of ancestor locations",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/LocationList"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/locations/{id}" : {
        "get" : {
          "tags" : [ "locations" ],
          "summary" : "Get a location",
          "description" : "Get a location by `id`.",
          "operationId" : "getLocationByID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "location Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,followers,tags,path"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The location",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Location"
                  }
                }
              }
            },
            "404" : {
              "description" : "Location for instance {id} is not found"
            }
          }
        },
        "delete" : {
          "tags" : [ "locations" ],
          "summary" : "Delete a location",
          "description" : "Delete a location by `id`.",
          "operationId" : "deleteLocation_2",
          "parameters" : [ {
            "name" : "hardDelete",
            "in" : "query",
            "description" : "Hard delete the entity. (Default = `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Location Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "Location for instance {id} is not found"
            }
          }
        },
        "patch" : {
          "tags" : [ "locations" ],
          "summary" : "Update a location",
          "description" : "Update an existing location using JsonPatch.",
          "externalDocs" : {
            "description" : "JsonPatch RFC",
            "url" : "https://tools.ietf.org/html/rfc6902"
          },
          "operationId" : "patchLocation",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "JsonPatch with array of operations",
            "content" : {
              "application/json-patch+json" : {
                "schema" : {
                  "type" : "object"
                },
                "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
              }
            }
          },
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/locations/{id}/followers" : {
        "put" : {
          "tags" : [ "locations" ],
          "summary" : "Add a follower",
          "description" : "Add a user identified by `userId` as followed of this location",
          "operationId" : "addFollower",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the location",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "Id of the user to be added as follower",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "OK",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ChangeEvent"
                  }
                }
              }
            },
            "404" : {
              "description" : "Location for instance {id} is not found"
            }
          }
        }
      },
      "/v1/locations/{id}/followers/{userId}" : {
        "delete" : {
          "tags" : [ "locations" ],
          "summary" : "Remove a follower",
          "description" : "Remove the user identified `userId` as a follower of the location.",
          "operationId" : "deleteFollower_1",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the location",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "userId",
            "in" : "path",
            "description" : "Id of the user being removed as follower",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ChangeEvent"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/locations/{id}/versions" : {
        "get" : {
          "tags" : [ "locations" ],
          "summary" : "List location versions",
          "description" : "Get a list of all the versions of a location identified by `id`",
          "operationId" : "listAllLocationVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "location Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of location versions",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityHistory"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/locations/{id}/versions/{version}" : {
        "get" : {
          "tags" : [ "locations" ],
          "summary" : "Get a version of the location",
          "description" : "Get a version of the location by given `id`",
          "operationId" : "getSpecificLocationVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "location Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "version",
            "in" : "path",
            "description" : "location version number in the form `major`.`minor`",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "0.1 or 1.1"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "location",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Location"
                  }
                }
              }
            },
            "404" : {
              "description" : "Location for instance {id} and version {version} is not found"
            }
          }
        }
      },
      "/v1/metadata/types" : {
        "get" : {
          "tags" : [ "metadata" ],
          "summary" : "List types",
          "description" : "Get a list of types. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
          "operationId" : "listTypes",
          "parameters" : [ {
            "name" : "category",
            "in" : "query",
            "description" : "Filter types by metadata type category.",
            "schema" : {
              "type" : "string",
              "example" : "Property, Entity"
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "description" : "Limit the number types returned. (1 to 1000000, default = 10)",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of types before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of types after this cursor",
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of types",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/TypeList"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "metadata" ],
          "summary" : "Create or update a type",
          "description" : "Create a new type, if it does not exist or update an existing type.",
          "operationId" : "createOrUpdate",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateType"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The type",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Type"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        },
        "post" : {
          "tags" : [ "metadata" ],
          "summary" : "Create a type",
          "description" : "Create a new type.",
          "operationId" : "createType",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateType"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The type",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Type"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/metadata/types/name/{name}" : {
        "get" : {
          "tags" : [ "metadata" ],
          "summary" : "Get a type by name",
          "description" : "Get a type by name.",
          "operationId" : "getTypeByFQN",
          "parameters" : [ {
            "name" : "name",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "customProperties"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The type",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Type"
                  }
                }
              }
            },
            "404" : {
              "description" : "Type for instance {id} is not found"
            }
          }
        }
      },
      "/v1/metadata/types/{id}" : {
        "get" : {
          "tags" : [ "metadata" ],
          "summary" : "Get a type",
          "description" : "Get a type by `id`.",
          "operationId" : "getTypeByID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "customProperties"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The type",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Type"
                  }
                }
              }
            },
            "404" : {
              "description" : "Type for instance {id} is not found"
            }
          }
        },
        "put" : {
          "tags" : [ "metadata" ],
          "summary" : "Add a Property to an entity",
          "description" : "Add a property to an entity type. Properties can only be added to entity type and not property type.",
          "operationId" : "addProperty",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Type Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomProperty"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "type for instance {id} is not found"
            }
          }
        },
        "delete" : {
          "tags" : [ "metadata" ],
          "summary" : "Delete a type",
          "description" : "Delete a type by `id`.",
          "operationId" : "deleteType",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Type Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "type for instance {id} is not found"
            }
          }
        },
        "patch" : {
          "tags" : [ "metadata" ],
          "summary" : "Update a type",
          "description" : "Update an existing type using JsonPatch.",
          "externalDocs" : {
            "description" : "JsonPatch RFC",
            "url" : "https://tools.ietf.org/html/rfc6902"
          },
          "operationId" : "patchType",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "JsonPatch with array of operations",
            "content" : {
              "application/json-patch+json" : {
                "schema" : {
                  "type" : "object"
                },
                "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
              }
            }
          },
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/metadata/types/{id}/versions" : {
        "get" : {
          "tags" : [ "metadata" ],
          "summary" : "List type versions",
          "description" : "Get a list of all the versions of a type identified by `id`",
          "operationId" : "listAllTypeVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "type Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of type versions",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityHistory"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/metadata/types/{id}/versions/{version}" : {
        "get" : {
          "tags" : [ "metadata" ],
          "summary" : "Get a version of the types",
          "description" : "Get a version of the type by given `id`",
          "operationId" : "getSpecificTypeVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "type Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "version",
            "in" : "path",
            "description" : "type version number in the form `major`.`minor`",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "0.1 or 1.1"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "types",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Type"
                  }
                }
              }
            },
            "404" : {
              "description" : "Type for instance {id} and version {version} is not found"
            }
          }
        }
      },
      "/v1/metrics" : {
        "get" : {
          "tags" : [ "metrics" ],
          "summary" : "List metrics",
          "description" : "Get a list of metrics. Use `fields` parameter to get only necessary fields.",
          "operationId" : "listMetrics",
          "parameters" : [ {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,usageSummary"
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of metrics before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of metrics after this cursor",
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of metrics",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MetricsList"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "metrics" ],
          "summary" : "Create or update a metric",
          "description" : "Create a new metric, if it does not exist or update an existing metric.",
          "operationId" : "createOrUpdateMetric",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Metrics"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The metric",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Metrics"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        },
        "post" : {
          "tags" : [ "metrics" ],
          "summary" : "Create a metric",
          "description" : "Create a new metric.",
          "operationId" : "createMetric",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Metrics"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The metric",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Metrics"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/metrics/{id}" : {
        "get" : {
          "tags" : [ "metrics" ],
          "summary" : "Get a metric",
          "description" : "Get a metric by `id`.",
          "operationId" : "getMetricByID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,usageSummary"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The metrics",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Metrics"
                  }
                }
              }
            },
            "404" : {
              "description" : "Metrics for instance {id} is not found"
            }
          }
        }
      },
      "/v1/mlmodels" : {
        "get" : {
          "tags" : [ "mlModels" ],
          "summary" : "List ML Models",
          "description" : "Get a list of mlmodels, optionally filtered by `service` it belongs to. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
          "operationId" : "listMlModels",
          "parameters" : [ {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,dashboard,followers,tags,usageSummary"
            }
          }, {
            "name" : "service",
            "in" : "query",
            "description" : "Filter MlModels by service name",
            "schema" : {
              "type" : "string",
              "example" : "airflow"
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "description" : "Limit the number models returned. (1 to 1000000, default = 10)",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of models before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of models after this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of models",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MlModelList"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "mlModels" ],
          "summary" : "Create or update an ML Model",
          "description" : "Create a new ML Model, if it does not exist or update an existing model.",
          "operationId" : "createOrUpdateMlModel",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateMlModel"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The model",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MlModel"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        },
        "post" : {
          "tags" : [ "mlModels" ],
          "summary" : "Create an ML Model",
          "description" : "Create a new ML Model.",
          "operationId" : "createMlModel",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateMlModel"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "ML Model",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MlModel"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/mlmodels/name/{fqn}" : {
        "get" : {
          "tags" : [ "mlModels" ],
          "summary" : "Get an ML Model by name",
          "description" : "Get an ML Model by fully qualified name.",
          "operationId" : "getMlModelByFQN",
          "parameters" : [ {
            "name" : "fqn",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,dashboard,followers,tags,usageSummary"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The model",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MlModel"
                  }
                }
              }
            },
            "404" : {
              "description" : "Model for instance {id} is not found"
            }
          }
        }
      },
      "/v1/mlmodels/{id}" : {
        "get" : {
          "tags" : [ "mlModels" ],
          "summary" : "Get an ML Model",
          "description" : "Get an ML Model by `id`.",
          "operationId" : "getMlModelByID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,dashboard,followers,tags,usageSummary"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The model",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MlModel"
                  }
                }
              }
            },
            "404" : {
              "description" : "Model for instance {id} is not found"
            }
          }
        },
        "delete" : {
          "tags" : [ "mlModels" ],
          "summary" : "Delete an ML Model",
          "description" : "Delete an ML Model by `id`.",
          "operationId" : "deleteMlModel",
          "parameters" : [ {
            "name" : "hardDelete",
            "in" : "query",
            "description" : "Hard delete the entity. (Default = `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "ML Model Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "model for instance {id} is not found"
            }
          }
        },
        "patch" : {
          "tags" : [ "mlModels" ],
          "summary" : "Update an ML Model",
          "description" : "Update an existing ML Model using JsonPatch.",
          "externalDocs" : {
            "description" : "JsonPatch RFC",
            "url" : "https://tools.ietf.org/html/rfc6902"
          },
          "operationId" : "patchMlModel",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the ML Model",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "JsonPatch with array of operations",
            "content" : {
              "application/json-patch+json" : {
                "schema" : {
                  "type" : "object"
                },
                "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
              }
            }
          },
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/mlmodels/{id}/followers" : {
        "put" : {
          "tags" : [ "mlModels" ],
          "summary" : "Add a follower",
          "description" : "Add a user identified by `userId` as follower of this model",
          "operationId" : "addFollower_1",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the model",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "Id of the user to be added as follower",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "OK",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ChangeEvent"
                  }
                }
              }
            },
            "404" : {
              "description" : "model for instance {id} is not found"
            }
          }
        }
      },
      "/v1/mlmodels/{id}/followers/{userId}" : {
        "delete" : {
          "tags" : [ "mlModels" ],
          "summary" : "Remove a follower",
          "description" : "Remove the user identified `userId` as a follower of the model.",
          "operationId" : "deleteFollower_2",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the model",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "userId",
            "in" : "path",
            "description" : "Id of the user being removed as follower",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ChangeEvent"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/mlmodels/{id}/versions" : {
        "get" : {
          "tags" : [ "mlModels" ],
          "summary" : "List Ml Model versions",
          "description" : "Get a list of all the versions of an Ml Model identified by `id`",
          "operationId" : "listAllMlModelVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "ML Model Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of Ml Model versions",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityHistory"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/mlmodels/{id}/versions/{version}" : {
        "get" : {
          "tags" : [ "mlModels" ],
          "summary" : "Get a version of the ML Model",
          "description" : "Get a version of the ML Model by given `id`",
          "operationId" : "getSpecificMlModelVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "ML Model Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "version",
            "in" : "path",
            "description" : "ML Model version number in the form `major`.`minor`",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "0.1 or 1.1"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "MlModel",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MlModel"
                  }
                }
              }
            },
            "404" : {
              "description" : "ML Model for instance {id} and version {version} is not found"
            }
          }
        }
      },
      "/v1/permissions" : {
        "get" : {
          "tags" : [ "permission" ],
          "summary" : "Get permissions for logged in user",
          "operationId" : "getPermissions",
          "responses" : {
            "200" : {
              "description" : "Permissions for logged in user",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Permissions"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/pipelines" : {
        "get" : {
          "tags" : [ "pipelines" ],
          "summary" : "List Pipelines",
          "description" : "Get a list of pipelines, optionally filtered by `service` it belongs to. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
          "operationId" : "listPipelines",
          "parameters" : [ {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,tasks,pipelineStatus,followers,tags"
            }
          }, {
            "name" : "service",
            "in" : "query",
            "description" : "Filter pipelines by service name",
            "schema" : {
              "type" : "string",
              "example" : "airflow"
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "description" : "Limit the number pipelines returned. (1 to 1000000, default = 10)",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of pipelines before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of pipelines after this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of pipelines",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/PipelineList"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "pipelines" ],
          "summary" : "Create or update a pipeline",
          "description" : "Create a new pipeline, if it does not exist or update an existing pipeline.",
          "operationId" : "createOrUpdatePipeline",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePipeline"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The pipeline",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Pipeline"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        },
        "post" : {
          "tags" : [ "pipelines" ],
          "summary" : "Create a pipeline",
          "description" : "Create a new pipeline.",
          "operationId" : "createPipeline",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePipeline"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The pipeline",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Pipeline"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/pipelines/name/{fqn}" : {
        "get" : {
          "tags" : [ "pipelines" ],
          "summary" : "Get a pipeline by name",
          "description" : "Get a pipeline by fully qualified name.",
          "operationId" : "getPipelineByFQN",
          "parameters" : [ {
            "name" : "fqn",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,tasks,pipelineStatus,followers,tags"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The pipeline",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Pipeline"
                  }
                }
              }
            },
            "404" : {
              "description" : "Pipeline for instance {id} is not found"
            }
          }
        }
      },
      "/v1/pipelines/{id}" : {
        "get" : {
          "tags" : [ "pipelines" ],
          "summary" : "Get a pipeline",
          "description" : "Get a pipeline by `id`.",
          "operationId" : "getPipelineWithID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,tasks,pipelineStatus,followers,tags"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The pipeline",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Pipeline"
                  }
                }
              }
            },
            "404" : {
              "description" : "Pipeline for instance {id} is not found"
            }
          }
        },
        "delete" : {
          "tags" : [ "pipelines" ],
          "summary" : "Delete a Pipeline",
          "description" : "Delete a pipeline by `id`.",
          "operationId" : "deletePipeline",
          "parameters" : [ {
            "name" : "hardDelete",
            "in" : "query",
            "description" : "Hard delete the entity. (Default = `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Pipeline Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "Pipeline for instance {id} is not found"
            }
          }
        },
        "patch" : {
          "tags" : [ "pipelines" ],
          "summary" : "Update a Pipeline",
          "description" : "Update an existing pipeline using JsonPatch.",
          "externalDocs" : {
            "description" : "JsonPatch RFC",
            "url" : "https://tools.ietf.org/html/rfc6902"
          },
          "operationId" : "patchPipeline",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "JsonPatch with array of operations",
            "content" : {
              "application/json-patch+json" : {
                "schema" : {
                  "type" : "object"
                },
                "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
              }
            }
          },
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/pipelines/{id}/followers" : {
        "put" : {
          "tags" : [ "pipelines" ],
          "summary" : "Add a follower",
          "description" : "Add a user identified by `userId` as follower of this pipeline",
          "operationId" : "addFollower_2",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the pipeline",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "Id of the user to be added as follower",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "OK",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ChangeEvent"
                  }
                }
              }
            },
            "404" : {
              "description" : "Pipeline for instance {id} is not found"
            }
          }
        }
      },
      "/v1/pipelines/{id}/followers/{userId}" : {
        "delete" : {
          "tags" : [ "pipelines" ],
          "summary" : "Remove a follower",
          "description" : "Remove the user identified `userId` as a follower of the pipeline.",
          "operationId" : "deleteFollower_3",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the pipeline",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "userId",
            "in" : "path",
            "description" : "Id of the user being removed as follower",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ChangeEvent"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/pipelines/{id}/status" : {
        "put" : {
          "tags" : [ "pipelines" ],
          "summary" : "Add status data",
          "description" : "Add status data to the pipeline.",
          "operationId" : "addStatusData",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the pipeline",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PipelineStatus"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The pipeline with a the new status",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Pipeline"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/pipelines/{id}/versions" : {
        "get" : {
          "tags" : [ "pipelines" ],
          "summary" : "List pipeline versions",
          "description" : "Get a list of all the versions of a pipeline identified by `id`",
          "operationId" : "listAllPipelineVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "pipeline Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of pipeline versions",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityHistory"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/pipelines/{id}/versions/{version}" : {
        "get" : {
          "tags" : [ "pipelines" ],
          "summary" : "Get a version of the pipeline",
          "description" : "Get a version of the pipeline by given `id`",
          "operationId" : "getSpecificPipelineVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Pipeline Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "version",
            "in" : "path",
            "description" : "Pipeline version number in the form `major`.`minor`",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "0.1 or 1.1"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "pipeline",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Pipeline"
                  }
                }
              }
            },
            "404" : {
              "description" : "Pipeline for instance {id} and version {version} is not found"
            }
          }
        }
      },
      "/v1/policies" : {
        "get" : {
          "tags" : [ "policies" ],
          "summary" : "List Policies",
          "description" : "Get a list of policies. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
          "operationId" : "listPolicies",
          "parameters" : [ {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,location"
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "description" : "Limit the number policies returned. (1 to 1000000, default = 10)",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of policies before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of policies after this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of policies",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/PolicyList"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "policies" ],
          "summary" : "Create or update a policy",
          "description" : "Create a new policy, if it does not exist or update an existing policy.",
          "operationId" : "createOrUpdatePolicy",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePolicy"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The policy",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Policy"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        },
        "post" : {
          "tags" : [ "policies" ],
          "summary" : "Create a policy",
          "description" : "Create a new policy.",
          "operationId" : "createPolicy",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePolicy"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The policy",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Policy"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/policies/name/{fqn}" : {
        "get" : {
          "tags" : [ "policies" ],
          "summary" : "Get a policy by name",
          "description" : "Get a policy by fully qualified name.",
          "operationId" : "getPolicyByFQN",
          "parameters" : [ {
            "name" : "fqn",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,location"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The policy",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Policy"
                  }
                }
              }
            },
            "404" : {
              "description" : "Policy for instance {id} is not found"
            }
          }
        }
      },
      "/v1/policies/{id}" : {
        "get" : {
          "tags" : [ "policies" ],
          "summary" : "Get a policy",
          "description" : "Get a policy by `id`.",
          "operationId" : "getPolicyByID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,location"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The policy",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Policy"
                  }
                }
              }
            },
            "404" : {
              "description" : "Policy for instance {id} is not found"
            }
          }
        },
        "delete" : {
          "tags" : [ "policies" ],
          "summary" : "Delete a Policy",
          "description" : "Delete a policy by `id`.",
          "operationId" : "deletePolicy",
          "parameters" : [ {
            "name" : "hardDelete",
            "in" : "query",
            "description" : "Hard delete the entity. (Default = `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Policy Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "policy for instance {id} is not found"
            }
          }
        },
        "patch" : {
          "tags" : [ "policies" ],
          "summary" : "Update a policy",
          "description" : "Update an existing policy using JsonPatch.",
          "externalDocs" : {
            "description" : "JsonPatch RFC",
            "url" : "https://tools.ietf.org/html/rfc6902"
          },
          "operationId" : "patchPolicy",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "JsonPatch with array of operations",
            "content" : {
              "application/json-patch+json" : {
                "schema" : {
                  "type" : "object"
                },
                "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
              }
            }
          },
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/policies/{id}/versions" : {
        "get" : {
          "tags" : [ "policies" ],
          "summary" : "List policy versions",
          "description" : "Get a list of all the versions of a policy identified by `id`",
          "operationId" : "listAllPolicyVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "policy Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of policy versions",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityHistory"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/policies/{id}/versions/{version}" : {
        "get" : {
          "tags" : [ "policies" ],
          "summary" : "Get a version of the policy",
          "description" : "Get a version of the policy by given `id`",
          "operationId" : "getSpecificPolicyVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "policy Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "version",
            "in" : "path",
            "description" : "policy version number in the form `major`.`minor`",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "0.1 or 1.1"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "policy",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Policy"
                  }
                }
              }
            },
            "404" : {
              "description" : "Policy for instance {id} and version {version} is not found"
            }
          }
        }
      },
      "/v1/reports" : {
        "get" : {
          "tags" : [ "reports" ],
          "summary" : "List reports",
          "description" : "Get a list of reports. Use `fields` parameter to get only necessary fields.",
          "operationId" : "listReports",
          "parameters" : [ {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,usageSummary"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of reports",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ReportList"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "reports" ],
          "summary" : "Create or update a report",
          "description" : "Create a new report, it it does not exist or update an existing report.",
          "operationId" : "createOrUpdateReport",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Report"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The report",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Report"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        },
        "post" : {
          "tags" : [ "reports" ],
          "summary" : "Create a report",
          "description" : "Create a new report.",
          "operationId" : "getReportByFQN",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Report"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The report",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Report"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/reports/{id}" : {
        "get" : {
          "tags" : [ "reports" ],
          "summary" : "Get a report",
          "description" : "Get a report by `id`.",
          "operationId" : "getReportByID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,usageSummary"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The report",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Report"
                  }
                }
              }
            },
            "404" : {
              "description" : "Report for instance {id} is not found"
            }
          }
        }
      },
      "/v1/roles" : {
        "get" : {
          "tags" : [ "roles" ],
          "summary" : "List roles",
          "description" : "Get a list of roles. Use cursor-based pagination to limit the number of entries in the list using `limit` and `before` or `after` query params.",
          "operationId" : "listRoles",
          "parameters" : [ {
            "name" : "default",
            "in" : "query",
            "description" : "List only default role(s)",
            "schema" : {
              "type" : "boolean",
              "example" : true
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "policies,teams,users"
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "description" : "Limit the number tables returned. (1 to 1000000, default = 10)",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of tables before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of tables after this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of roles",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/RoleList"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "roles" ],
          "summary" : "Update role",
          "description" : "Create or Update a role.",
          "operationId" : "createOrUpdateRole",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateRole"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The role ",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Role"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        },
        "post" : {
          "tags" : [ "roles" ],
          "summary" : "Create a role",
          "description" : "Create a new role.",
          "operationId" : "createRole",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateRole"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The role",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Role"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/roles/name/{name}" : {
        "get" : {
          "tags" : [ "roles" ],
          "summary" : "Get a role by name",
          "description" : "Get a role by `name`.",
          "operationId" : "getRoleByFQN",
          "parameters" : [ {
            "name" : "name",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "policies,teams,users"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The role",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Role"
                  }
                }
              }
            },
            "404" : {
              "description" : "Role for instance {name} is not found"
            }
          }
        }
      },
      "/v1/roles/{id}" : {
        "get" : {
          "tags" : [ "roles" ],
          "summary" : "Get a role",
          "description" : "Get a role by `id`.",
          "operationId" : "getRoleByID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "policies,teams,users"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The role",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Role"
                  }
                }
              }
            },
            "404" : {
              "description" : "Role for instance {id} is not found"
            }
          }
        },
        "delete" : {
          "tags" : [ "roles" ],
          "summary" : "Delete a role",
          "description" : "Delete a role by given `id`.",
          "operationId" : "deleteRole",
          "parameters" : [ {
            "name" : "hardDelete",
            "in" : "query",
            "description" : "Hard delete the entity. (Default = `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "Role for instance {id} is not found"
            }
          }
        },
        "patch" : {
          "tags" : [ "roles" ],
          "summary" : "Update a role",
          "description" : "Update an existing role with JsonPatch.",
          "externalDocs" : {
            "description" : "JsonPatch RFC",
            "url" : "https://tools.ietf.org/html/rfc6902"
          },
          "operationId" : "patchRole",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "JsonPatch with array of operations",
            "content" : {
              "application/json-patch+json" : {
                "schema" : {
                  "type" : "object"
                },
                "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
              }
            }
          },
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/roles/{id}/versions" : {
        "get" : {
          "tags" : [ "roles" ],
          "summary" : "List role versions",
          "description" : "Get a list of all the versions of a role identified by `id`",
          "operationId" : "listAllRoleVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "role Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of role versions",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityHistory"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/roles/{id}/versions/{version}" : {
        "get" : {
          "tags" : [ "roles" ],
          "summary" : "Get a version of the role",
          "description" : "Get a version of the role by given `id`",
          "operationId" : "getSpecificRoleVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Role Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "version",
            "in" : "path",
            "description" : "Role version number in the form `major`.`minor`",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "0.1 or 1.1"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "role",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Role"
                  }
                }
              }
            },
            "404" : {
              "description" : "Role for instance {id} and version {version} is not found"
            }
          }
        }
      },
      "/v1/search/query" : {
        "get" : {
          "tags" : [ "search" ],
          "summary" : "Search entities",
          "description" : "Search entities using query test. Use query params `from` and `size` for pagination. Use `sort_field` to sort the results in `sort_order`.",
          "operationId" : "searchEntitiesWithQuery",
          "parameters" : [ {
            "name" : "q",
            "in" : "query",
            "description" : "Search Query Text, Pass *text* for substring match; Pass without wildcards for exact match. <br/> 1. For listing all tables or topics pass q=* <br/>2. For search tables or topics pass q=*search_term* <br/>3. For searching field names such as search by column_name pass q=column_names:address <br/>4. For searching by tag names pass q=tags:user.email <br/>5. When user selects a filter pass q=query_text AND tags:user.email AND platform:MYSQL <br/>6. Search with multiple values of same filter q=tags:user.email AND tags:user.address <br/> logic operators such as AND and OR must be in uppercase ",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "index",
            "in" : "query",
            "description" : "ElasticSearch Index name, defaults to table_search_index",
            "schema" : {
              "type" : "string",
              "default" : "table_search_index"
            }
          }, {
            "name" : "deleted",
            "in" : "query",
            "description" : "Filter documents by deleted param. By default deleted is false",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "from",
            "in" : "query",
            "description" : "From field to paginate the results, defaults to 0",
            "schema" : {
              "type" : "integer",
              "format" : "int32",
              "default" : 0
            }
          }, {
            "name" : "size",
            "in" : "query",
            "description" : "Size field to limit the no.of results returned, defaults to 10",
            "schema" : {
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "sort_field",
            "in" : "query",
            "description" : "Sort the search results by field, available fields to sort weekly_stats , daily_stats, monthly_stats, last_updated_timestamp",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "sort_order",
            "in" : "query",
            "description" : "Sort order asc for ascending or desc for descending, defaults to desc",
            "schema" : {
              "type" : "string",
              "default" : "desc"
            }
          }, {
            "name" : "track_total_hits",
            "in" : "query",
            "description" : "Track Total Hits",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "search response",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/SearchResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/search/suggest" : {
        "get" : {
          "tags" : [ "search" ],
          "summary" : "Suggest Entities",
          "description" : "Get suggested entities used for auto-completion.",
          "operationId" : "getSuggestedEntities",
          "parameters" : [ {
            "name" : "q",
            "in" : "query",
            "description" : "Suggest API can be used to auto-fill the entities name while use is typing search text <br/> 1. To get suggest results pass q=us or q=user etc.. <br/> 2. Do not add any wild-cards such as * like in search api <br/> 3. suggest api is a prefix suggestion <br/>",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "index",
            "in" : "query",
            "schema" : {
              "type" : "string",
              "default" : "table_search_index"
            }
          }, {
            "name" : "field",
            "in" : "query",
            "schema" : {
              "type" : "string",
              "default" : "suggest"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Table Suggestion API",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Suggest"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/services" : {
        "get" : {
          "tags" : [ "services" ],
          "summary" : "List service collections",
          "description" : "Get a list of resources under service collection.",
          "operationId" : "listServiceCollection",
          "responses" : {
            "200" : {
              "description" : "List of serviceCollections",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/CollectionList"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/services/dashboardServices" : {
        "get" : {
          "tags" : [ "dashboardServices" ],
          "summary" : "List dashboard services",
          "description" : "Get a list of dashboard services.",
          "operationId" : "listDashboardsService",
          "parameters" : [ {
            "name" : "name",
            "in" : "query",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner"
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of dashboard services before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of dashboard services after this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of dashboard service instances",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/DashboardServiceList"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "dashboardServices" ],
          "summary" : "Update a Dashboard service",
          "description" : "Update an existing dashboard service identified by `id`.",
          "operationId" : "createOrUpdateDashboardService",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateDashboardService"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "Dashboard service instance",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/DashboardService"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        },
        "post" : {
          "tags" : [ "dashboardServices" ],
          "summary" : "Create a dashboard service",
          "description" : "Create a new dashboard service.",
          "operationId" : "createDashboardService",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateDashboardService"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "Dashboard service instance",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/DashboardService"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/services/dashboardServices/name/{name}" : {
        "get" : {
          "tags" : [ "dashboardServices" ],
          "summary" : "Get dashboard service by name",
          "description" : "Get a dashboard service by the service `name`.",
          "operationId" : "getDashboardServiceByFQN",
          "parameters" : [ {
            "name" : "name",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Dashboard service instance",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/DashboardService"
                  }
                }
              }
            },
            "404" : {
              "description" : "Dashboard service for instance {id} is not found"
            }
          }
        }
      },
      "/v1/services/dashboardServices/{id}" : {
        "get" : {
          "tags" : [ "dashboardServices" ],
          "summary" : "Get a dashboard service",
          "description" : "Get a dashboard service by `id`.",
          "operationId" : "getDashboardServiceByID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Dashboard service instance",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/DashboardService"
                  }
                }
              }
            },
            "404" : {
              "description" : "Dashboard service for instance {id} is not found"
            }
          }
        },
        "delete" : {
          "tags" : [ "dashboardServices" ],
          "summary" : "Delete a Dashboard service",
          "description" : "Delete a Dashboard services. If dashboard (and charts) belong to the service, it can't be deleted.",
          "operationId" : "deleteDashboardService",
          "parameters" : [ {
            "name" : "recursive",
            "in" : "query",
            "description" : "Recursively delete this entity and it's children. (Default `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "hardDelete",
            "in" : "query",
            "description" : "Hard delete the entity. (Default = `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the dashboard service",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "DashboardService service for instance {id} is not found"
            }
          }
        }
      },
      "/v1/services/dashboardServices/{id}/versions" : {
        "get" : {
          "tags" : [ "dashboardServices" ],
          "summary" : "List dashboard service versions",
          "description" : "Get a list of all the versions of a dashboard service identified by `id`",
          "operationId" : "listAllDashboardServiceVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "dashboard service Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of dashboard service versions",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityHistory"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/services/dashboardServices/{id}/versions/{version}" : {
        "get" : {
          "tags" : [ "dashboardServices" ],
          "summary" : "Get a version of the dashboard service",
          "description" : "Get a version of the dashboard service by given `id`",
          "operationId" : "getSpecificDashboardServiceVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "dashboard service Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "version",
            "in" : "path",
            "description" : "dashboard service version number in the form `major`.`minor`",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "0.1 or 1.1"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "dashboard service",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/DashboardService"
                  }
                }
              }
            },
            "404" : {
              "description" : "Dashboard service for instance {id} and version {version} is not found"
            }
          }
        }
      },
      "/v1/services/databaseServices" : {
        "get" : {
          "tags" : [ "databaseService" ],
          "summary" : "List database services",
          "description" : "Get a list of database services.",
          "operationId" : "listDatabaseServices",
          "parameters" : [ {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "pipelines,owner"
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of database services before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of database services after this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of database service instances",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/DatabaseServiceList"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "databaseService" ],
          "summary" : "Update database service",
          "description" : "Update an existing or create a new database service.",
          "operationId" : "createOrUpdateDatabaseService",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateDatabaseService"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "Database service instance",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/DatabaseService"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        },
        "post" : {
          "tags" : [ "databaseService" ],
          "summary" : "Create database service",
          "description" : "Create a new database service.",
          "operationId" : "createDatabaseService",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateDatabaseService"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "Database service instance",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/DatabaseService"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/services/databaseServices/name/{name}" : {
        "get" : {
          "tags" : [ "databaseService" ],
          "summary" : "Get database service by name",
          "description" : "Get a database service by the service `name`.",
          "operationId" : "getDatabaseServiceByFQN",
          "parameters" : [ {
            "name" : "name",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "pipelines,owner"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Database service instance",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/DatabaseService"
                  }
                }
              }
            },
            "404" : {
              "description" : "Database service for instance {id} is not found"
            }
          }
        }
      },
      "/v1/services/databaseServices/{id}" : {
        "get" : {
          "tags" : [ "databaseService" ],
          "summary" : "Get a database service",
          "description" : "Get a database service by `id`.",
          "operationId" : "getDatabaseServiceByID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "pipelines,owner"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Database service instance",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/DatabaseService"
                  }
                }
              }
            },
            "404" : {
              "description" : "Database service for instance {id} is not found"
            }
          }
        },
        "delete" : {
          "tags" : [ "databaseService" ],
          "summary" : "Delete a database service",
          "description" : "Delete a database services. If databases (and tables) belong the service, it can't be deleted.",
          "operationId" : "deleteDatabaseService",
          "parameters" : [ {
            "name" : "recursive",
            "in" : "query",
            "description" : "Recursively delete this entity and it's children. (Default `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "hardDelete",
            "in" : "query",
            "description" : "Hard delete the entity. (Default = `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the database service",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "DatabaseService service for instance {id} is not found"
            }
          }
        }
      },
      "/v1/services/databaseServices/{id}/versions" : {
        "get" : {
          "tags" : [ "databaseService" ],
          "summary" : "List database service versions",
          "description" : "Get a list of all the versions of a database service identified by `id`",
          "operationId" : "listAllDatabaseServiceVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "database service Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of database service versions",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityHistory"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/services/databaseServices/{id}/versions/{version}" : {
        "get" : {
          "tags" : [ "databaseService" ],
          "summary" : "Get a version of the database service",
          "description" : "Get a version of the database service by given `id`",
          "operationId" : "getSpecificDatabaseServiceVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "database service Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "version",
            "in" : "path",
            "description" : "database service version number in the form `major`.`minor`",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "0.1 or 1.1"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "database service",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/DatabaseService"
                  }
                }
              }
            },
            "404" : {
              "description" : "Database service for instance {id} and version {version} is not found"
            }
          }
        }
      },
      "/v1/services/ingestionPipelines" : {
        "get" : {
          "tags" : [ "IngestionPipelines" ],
          "summary" : "List Ingestion Pipelines for Metadata Operations",
          "description" : "Get a list of Airflow Pipelines for Metadata Operations. Use `fields` parameter to get only necessary fields.  Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
          "operationId" : "listIngestionPipelines",
          "parameters" : [ {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner"
            }
          }, {
            "name" : "service",
            "in" : "query",
            "description" : "Filter airflow pipelines by service fully qualified name",
            "schema" : {
              "type" : "string",
              "example" : "snowflakeWestCoast"
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "description" : "Limit the number ingestion returned. (1 to 1000000, default = 10)",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of ingestion before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of ingestion after this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of ingestion workflows",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/IngestionPipeline"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "IngestionPipelines" ],
          "summary" : "Create or update a IngestionPipeline",
          "description" : "Create a new IngestionPipeline, if it does not exist or update an existing IngestionPipeline.",
          "operationId" : "createOrUpdateIngestionPipeline",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateIngestionPipeline"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The IngestionPipeline",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/IngestionPipeline"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        },
        "post" : {
          "tags" : [ "IngestionPipelines" ],
          "summary" : "Create a Ingestion Pipeline",
          "description" : "Create a new Ingestion Pipeline.",
          "operationId" : "createIngestionPipeline",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateIngestionPipeline"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The Ingestion Pipeline",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/IngestionPipeline"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/services/ingestionPipelines/deploy/{id}" : {
        "post" : {
          "tags" : [ "IngestionPipelines" ],
          "summary" : "Deploy a ingestion pipeline run",
          "description" : "Trigger a ingestion pipeline run by id.",
          "operationId" : "deployIngestion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The ingestion",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/IngestionPipeline"
                  }
                }
              }
            },
            "404" : {
              "description" : "Ingestion for instance {id} is not found"
            }
          }
        }
      },
      "/v1/services/ingestionPipelines/logs/{id}/last" : {
        "get" : {
          "tags" : [ "IngestionPipelines" ],
          "summary" : "Retrieve all logs from last ingestion pipeline run",
          "description" : "Get all logs from last ingestion pipeline run by `id`.",
          "operationId" : "getLastIngestionLogs",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Pipeline Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "JSON object with the task instance name of the ingestion on each key and log in the value",
              "content" : {
                "application/json" : { }
              }
            },
            "404" : {
              "description" : "Logs for instance {id} is not found"
            }
          }
        }
      },
      "/v1/services/ingestionPipelines/name/{fqn}" : {
        "get" : {
          "tags" : [ "IngestionPipelines" ],
          "summary" : "Get a IngestionPipeline by name",
          "description" : "Get a ingestion by fully qualified name.",
          "operationId" : "getSpecificIngestionPipelineByFQN",
          "parameters" : [ {
            "name" : "fqn",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "IngestionPipeline",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/IngestionPipeline"
                  }
                }
              }
            },
            "404" : {
              "description" : "Ingestion for instance {id} is not found"
            }
          }
        }
      },
      "/v1/services/ingestionPipelines/status" : {
        "get" : {
          "tags" : [ "IngestionPipelines" ],
          "summary" : "Check the Airflow REST status",
          "description" : "Check that the Airflow REST endpoint is reachable and up and running",
          "operationId" : "checkRestAirflowStatus",
          "responses" : {
            "200" : {
              "description" : "Status message",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/services/ingestionPipelines/testConnection" : {
        "post" : {
          "tags" : [ "IngestionPipelines" ],
          "summary" : "Test Connection of a Service",
          "description" : "Test Connection of a Service.",
          "operationId" : "testConnection",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestServiceConnection"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The ingestion",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/services/ingestionPipelines/toggleIngestion/{id}" : {
        "post" : {
          "tags" : [ "IngestionPipelines" ],
          "summary" : "Set an Ingestion pipeline either as Enabled or Disabled",
          "description" : "Toggle an ingestion pipeline state by id.",
          "operationId" : "toggleIngestionPipelineEnabled",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The ingestion",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/IngestionPipeline"
                  }
                }
              }
            },
            "404" : {
              "description" : "Ingestion for instance {id} is not found"
            }
          }
        }
      },
      "/v1/services/ingestionPipelines/trigger/{id}" : {
        "post" : {
          "tags" : [ "IngestionPipelines" ],
          "summary" : "Trigger a ingestion pipeline run",
          "description" : "Trigger a ingestion pipeline run by id.",
          "operationId" : "triggerIngestionPipelineRun",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The ingestion",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/IngestionPipeline"
                  }
                }
              }
            },
            "404" : {
              "description" : "Ingestion for instance {id} is not found"
            }
          }
        }
      },
      "/v1/services/ingestionPipelines/{id}" : {
        "get" : {
          "tags" : [ "IngestionPipelines" ],
          "summary" : "Get a IngestionPipeline",
          "description" : "Get a IngestionPipeline by `id`.",
          "operationId" : "getIngestionPipelineByID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The ingestion",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/IngestionPipeline"
                  }
                }
              }
            },
            "404" : {
              "description" : "IngestionPipeline for instance {id} is not found"
            }
          }
        },
        "delete" : {
          "tags" : [ "IngestionPipelines" ],
          "summary" : "Delete a Ingestion",
          "description" : "Delete a ingestion by `id`.",
          "operationId" : "deleteIngestionPipeline",
          "parameters" : [ {
            "name" : "hardDelete",
            "in" : "query",
            "description" : "Hard delete the entity. (Default = `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Pipeline Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "Ingestion for instance {id} is not found"
            }
          }
        },
        "patch" : {
          "tags" : [ "IngestionPipelines" ],
          "summary" : "Update a IngestionPipeline",
          "description" : "Update an existing IngestionPipeline using JsonPatch.",
          "externalDocs" : {
            "description" : "JsonPatch RFC",
            "url" : "https://tools.ietf.org/html/rfc6902"
          },
          "operationId" : "patchIngestionPipeline",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "JsonPatch with array of operations",
            "content" : {
              "application/json-patch+json" : {
                "schema" : {
                  "type" : "object"
                },
                "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
              }
            }
          },
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/services/ingestionPipelines/{id}/versions" : {
        "get" : {
          "tags" : [ "IngestionPipelines" ],
          "summary" : "List ingestion workflow versions",
          "description" : "Get a list of all the versions of a IngestionPipeline identified by `id`",
          "operationId" : "listAllIngestionPipelineVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "IngestionPipeline Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of IngestionPipeline versions",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityHistory"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/services/ingestionPipelines/{id}/versions/{version}" : {
        "get" : {
          "tags" : [ "IngestionPipelines" ],
          "summary" : "Get a version of the IngestionPipeline",
          "description" : "Get a version of the IngestionPipeline by given `id`",
          "operationId" : "getSpecificIngestionPipelineVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Ingestion Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "version",
            "in" : "path",
            "description" : "Ingestion version number in the form `major`.`minor`",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "0.1 or 1.1"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "IngestionPipelines",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/IngestionPipeline"
                  }
                }
              }
            },
            "404" : {
              "description" : "IngestionPipeline for instance {id} and version  {version} is not found"
            }
          }
        }
      },
      "/v1/services/messagingServices" : {
        "get" : {
          "tags" : [ "MessagingService" ],
          "summary" : "List messaging services",
          "description" : "Get a list of messaging services. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
          "operationId" : "listMessagingService",
          "parameters" : [ {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner"
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "description" : "Limit number services returned. (1 to 1000000, default 10)",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of services before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of services after this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of messaging services",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MessagingServiceList"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "MessagingService" ],
          "summary" : "Update messaging service",
          "description" : "Create a new messaging service or Update an existing messaging service identified by `id`.",
          "operationId" : "createOrUpdateMessagingService",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the messaging service",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateMessagingService"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "Messaging service instance",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MessagingService"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        },
        "post" : {
          "tags" : [ "MessagingService" ],
          "summary" : "Create a messaging service",
          "description" : "Create a new messaging service.",
          "operationId" : "createMessagingService",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateMessagingService"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "Messaging service instance",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MessagingService"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/services/messagingServices/name/{name}" : {
        "get" : {
          "tags" : [ "MessagingService" ],
          "summary" : "Get messaging service by name",
          "description" : "Get a messaging service by the service `name`.",
          "operationId" : "getMessagingServiceByFQN",
          "parameters" : [ {
            "name" : "name",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Messaging service instance",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MessagingService"
                  }
                }
              }
            },
            "404" : {
              "description" : "Messaging service for instance {id} is not found"
            }
          }
        }
      },
      "/v1/services/messagingServices/{id}" : {
        "get" : {
          "tags" : [ "MessagingService" ],
          "summary" : "Get a messaging service",
          "description" : "Get a messaging service by `id`.",
          "operationId" : "getMessagingServiceByID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Messaging service instance",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MessagingService"
                  }
                }
              }
            },
            "404" : {
              "description" : "Messaging service for instance {id} is not found"
            }
          }
        },
        "delete" : {
          "tags" : [ "MessagingService" ],
          "summary" : "Delete a messaging service",
          "description" : "Delete a messaging service. If topics belong the service, it can't be deleted.",
          "operationId" : "deleteMessagingService",
          "parameters" : [ {
            "name" : "recursive",
            "in" : "query",
            "description" : "Recursively delete this entity and it's children. (Default `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "hardDelete",
            "in" : "query",
            "description" : "Hard delete the entity. (Default = `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the messaging service",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "MessagingService service for instance {id} is not found"
            }
          }
        }
      },
      "/v1/services/messagingServices/{id}/versions" : {
        "get" : {
          "tags" : [ "MessagingService" ],
          "summary" : "List messaging service versions",
          "description" : "Get a list of all the versions of a messaging service identified by `id`",
          "operationId" : "listAllMessagingServiceVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "messaging service Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of messaging service versions",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityHistory"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/services/messagingServices/{id}/versions/{version}" : {
        "get" : {
          "tags" : [ "MessagingService" ],
          "summary" : "Get a version of the messaging service",
          "description" : "Get a version of the messaging service by given `id`",
          "operationId" : "getSpecificMessagingServiceVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "messaging service Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "version",
            "in" : "path",
            "description" : "messaging service version number in the form `major`.`minor`",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "0.1 or 1.1"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "messaging service",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MessagingService"
                  }
                }
              }
            },
            "404" : {
              "description" : "Messaging service for instance {id} and version {version} is not found"
            }
          }
        }
      },
      "/v1/services/mlmodelServices" : {
        "get" : {
          "tags" : [ "mlModelService" ],
          "summary" : "List mlModel services",
          "description" : "Get a list of mlModel services. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
          "operationId" : "listMlModelService",
          "parameters" : [ {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "pipelines,owner"
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "description" : "Limit number services returned. (1 to 1000000, default 10)",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of services before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of services after this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of mlModel services",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MlModelServiceList"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "mlModelService" ],
          "summary" : "Update mlModel service",
          "description" : "Create a new mlModel service or update an existing mlModel service identified by `id`.",
          "operationId" : "createOrUpdateMlModelService",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateMlModelService"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "MlModel service instance",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MlModelService"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        },
        "post" : {
          "tags" : [ "mlModelService" ],
          "summary" : "Create a mlModel service",
          "description" : "Create a new mlModel service.",
          "operationId" : "createMlModelService",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateMlModelService"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "MlModel service instance",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MlModelService"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/services/mlmodelServices/name/{name}" : {
        "get" : {
          "tags" : [ "mlModelService" ],
          "summary" : "Get mlModel service by name",
          "description" : "Get a mlModel service by the service `name`.",
          "operationId" : "getMlModelServiceByFQN",
          "parameters" : [ {
            "name" : "name",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "pipelines,owner"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "MlModel service instance",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MlModelService"
                  }
                }
              }
            },
            "404" : {
              "description" : "MlModel service for instance {id} is not found"
            }
          }
        }
      },
      "/v1/services/mlmodelServices/{id}" : {
        "get" : {
          "tags" : [ "mlModelService" ],
          "summary" : "Get a mlModel service",
          "description" : "Get a mlModel service by `id`.",
          "operationId" : "getMlModelServiceByID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "pipelines,owner"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "MlModel service instance",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MlModelService"
                  }
                }
              }
            },
            "404" : {
              "description" : "MlModel service for instance {id} is not found"
            }
          }
        },
        "delete" : {
          "tags" : [ "mlModelService" ],
          "summary" : "Delete a mlModel service",
          "description" : "Delete a mlModel services. If mlModels (and tasks) belong to the service, it can't be deleted.",
          "operationId" : "deleteMlModelService",
          "parameters" : [ {
            "name" : "recursive",
            "in" : "query",
            "description" : "Recursively delete this entity and it's children. (Default `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "hardDelete",
            "in" : "query",
            "description" : "Hard delete the entity. (Default = `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the mlModel service",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "MlModel service for instance {id} is not found"
            }
          }
        }
      },
      "/v1/services/mlmodelServices/{id}/versions" : {
        "get" : {
          "tags" : [ "mlModelService" ],
          "summary" : "List mlModel service versions",
          "description" : "Get a list of all the versions of a mlModel service identified by `id`",
          "operationId" : "listAllMlModelServiceVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "mlModel service Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of mlModel service versions",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityHistory"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/services/mlmodelServices/{id}/versions/{version}" : {
        "get" : {
          "tags" : [ "mlModelService" ],
          "summary" : "Get a version of the mlModel service",
          "description" : "Get a version of the mlModel service by given `id`",
          "operationId" : "getSpecificMlModelService",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "mlModel service Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "version",
            "in" : "path",
            "description" : "mlModel service version number in the form `major`.`minor`",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "0.1 or 1.1"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "mlModel service",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MlModelService"
                  }
                }
              }
            },
            "404" : {
              "description" : "MlModel service for instance {id} and version {version} is not found"
            }
          }
        }
      },
      "/v1/services/pipelineServices" : {
        "get" : {
          "tags" : [ "pipelineService" ],
          "summary" : "List pipeline services",
          "description" : "Get a list of pipeline services. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
          "operationId" : "listPipelineService",
          "parameters" : [ {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "pipelines,owner"
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "description" : "Limit number services returned. (1 to 1000000, default 10)",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of services before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of services after this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of pipeline services",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/PipelineServiceList"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "pipelineService" ],
          "summary" : "Update pipeline service",
          "description" : "Create a new pipeline service or update an existing pipeline service identified by `id`.",
          "operationId" : "createOrUpdatePipelineService",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePipelineService"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "Pipeline service instance",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/PipelineService"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        },
        "post" : {
          "tags" : [ "pipelineService" ],
          "summary" : "Create a pipeline service",
          "description" : "Create a new pipeline service.",
          "operationId" : "createPipelineService",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePipelineService"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "Pipeline service instance",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/PipelineService"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/services/pipelineServices/name/{name}" : {
        "get" : {
          "tags" : [ "pipelineService" ],
          "summary" : "Get pipeline service by name",
          "description" : "Get a pipeline service by the service `name`.",
          "operationId" : "getPipelineServiceByFQN",
          "parameters" : [ {
            "name" : "name",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "pipelines,owner"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Pipeline service instance",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/PipelineService"
                  }
                }
              }
            },
            "404" : {
              "description" : "Pipeline service for instance {id} is not found"
            }
          }
        }
      },
      "/v1/services/pipelineServices/{id}" : {
        "get" : {
          "tags" : [ "pipelineService" ],
          "summary" : "Get a pipeline service",
          "description" : "Get a pipeline service by `id`.",
          "operationId" : "getPipelineServiceByID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "pipelines,owner"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Pipeline service instance",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/PipelineService"
                  }
                }
              }
            },
            "404" : {
              "description" : "Pipeline service for instance {id} is not found"
            }
          }
        },
        "delete" : {
          "tags" : [ "pipelineService" ],
          "summary" : "Delete a pipeline service",
          "description" : "Delete a pipeline services. If pipelines (and tasks) belong to the service, it can't be deleted.",
          "operationId" : "deletePipelineService",
          "parameters" : [ {
            "name" : "recursive",
            "in" : "query",
            "description" : "Recursively delete this entity and it's children. (Default `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "hardDelete",
            "in" : "query",
            "description" : "Hard delete the entity. (Default = `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the pipeline service",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "Pipeline service for instance {id} is not found"
            }
          }
        }
      },
      "/v1/services/pipelineServices/{id}/versions" : {
        "get" : {
          "tags" : [ "pipelineService" ],
          "summary" : "List pipeline service versions",
          "description" : "Get a list of all the versions of a pipeline service identified by `id`",
          "operationId" : "listAllPipelineServiceVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "pipeline service Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of pipeline service versions",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityHistory"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/services/pipelineServices/{id}/versions/{version}" : {
        "get" : {
          "tags" : [ "pipelineService" ],
          "summary" : "Get a version of the pipeline service",
          "description" : "Get a version of the pipeline service by given `id`",
          "operationId" : "getSpecificPipelineService",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "pipeline service Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "version",
            "in" : "path",
            "description" : "pipeline service version number in the form `major`.`minor`",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "0.1 or 1.1"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "pipeline service",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/PipelineService"
                  }
                }
              }
            },
            "404" : {
              "description" : "Pipeline service for instance {id} and version {version} is not found"
            }
          }
        }
      },
      "/v1/services/storageServices" : {
        "get" : {
          "tags" : [ "storageService" ],
          "summary" : "List storage services",
          "description" : "Get a list of storage services. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
          "operationId" : "listStorageService",
          "parameters" : [ {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner"
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "description" : "Limit number of services returned. (1 to 1000000, default 10)",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of services before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of services after this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of storage services",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/StorageServiceList"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "storageService" ],
          "summary" : "Update storage service",
          "description" : "Update an existing storage service identified by `id`.",
          "operationId" : "createOrUpdateStorageService",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateStorageService"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "Storage service instance",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/StorageService"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        },
        "post" : {
          "tags" : [ "storageService" ],
          "summary" : "Create storage service",
          "description" : "Create a new storage service.",
          "operationId" : "createStorageService",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateStorageService"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "Storage service instance",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/StorageService"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/services/storageServices/name/{name}" : {
        "get" : {
          "tags" : [ "storageService" ],
          "summary" : "Get storage service by name",
          "description" : "Get a storage service by the service `name`.",
          "operationId" : "getStorageServiceByFQN",
          "parameters" : [ {
            "name" : "name",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Storage service instance",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/StorageService"
                  }
                }
              }
            },
            "404" : {
              "description" : "Storage service for instance {id} is not found"
            }
          }
        }
      },
      "/v1/services/storageServices/{id}" : {
        "get" : {
          "tags" : [ "storageService" ],
          "summary" : "Get a storage service",
          "description" : "Get a storage service by `id`.",
          "operationId" : "getStorageServiceByID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Storage service instance",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/StorageService"
                  }
                }
              }
            },
            "404" : {
              "description" : "Storage service for instance {id} is not found"
            }
          }
        },
        "delete" : {
          "tags" : [ "storageService" ],
          "summary" : "Delete a storage service",
          "description" : "Delete a storage services. If storages (and tables) belong the service, it can't be deleted.",
          "operationId" : "deleteStorageService",
          "parameters" : [ {
            "name" : "recursive",
            "in" : "query",
            "description" : "Recursively delete this entity and it's children. (Default `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "hardDelete",
            "in" : "query",
            "description" : "Hard delete the entity. (Default = `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the storage service",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "StorageService service for instance {id} is not found"
            }
          }
        }
      },
      "/v1/services/storageServices/{id}/versions" : {
        "get" : {
          "tags" : [ "storageService" ],
          "summary" : "List storage service versions",
          "description" : "Get a list of all the versions of a storage service identified by `id`",
          "operationId" : "listAllStorageServiceVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "storage service Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of storage service versions",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityHistory"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/services/storageServices/{id}/versions/{version}" : {
        "get" : {
          "tags" : [ "storageService" ],
          "summary" : "Get a version of the storage service",
          "description" : "Get a version of the storage service by given `id`",
          "operationId" : "getSpecificStorageServiceVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "storage service Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "version",
            "in" : "path",
            "description" : "storage service version number in the form `major`.`minor`",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "0.1 or 1.1"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "storage service",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/StorageService"
                  }
                }
              }
            },
            "404" : {
              "description" : "Storage service for instance {id} and version {version} is not found"
            }
          }
        }
      },
      "/v1/tables" : {
        "get" : {
          "tags" : [ "tables" ],
          "summary" : "List tables",
          "description" : "Get a list of tables, optionally filtered by `database` it belongs to. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
          "operationId" : "listTables",
          "parameters" : [ {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "tableConstraints,tablePartition,usageSummary,owner,profileSample,profileQuery,customMetrics,tags,followers,joins,sampleData,viewDefinition,tableProfile,location,tableQueries,dataModel,tests,extension"
            }
          }, {
            "name" : "database",
            "in" : "query",
            "description" : "Filter tables by database fully qualified name",
            "schema" : {
              "type" : "string",
              "example" : "snowflakeWestCoast.financeDB"
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "description" : "Limit the number tables returned. (1 to 1000000, default = 10) ",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of tables before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of tables after this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of tables",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/TableList"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "tables" ],
          "summary" : "Create or update a table",
          "description" : "Create a table, if it does not exist. If a table already exists, update the table.",
          "operationId" : "createOrUpdateTable",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateTable"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The table",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Table"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        },
        "post" : {
          "tags" : [ "tables" ],
          "summary" : "Create a table",
          "description" : "Create a new table under an existing `database`.",
          "operationId" : "createTable",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateTable"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "table",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Table"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/tables/name/{fqn}" : {
        "get" : {
          "tags" : [ "tables" ],
          "summary" : "Get a table by name",
          "description" : "Get a table by fully qualified table name.",
          "operationId" : "getTableByFQN",
          "parameters" : [ {
            "name" : "fqn",
            "in" : "path",
            "description" : "Fully qualified name of the table",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "tableConstraints,tablePartition,usageSummary,owner,profileSample,profileQuery,customMetrics,tags,followers,joins,sampleData,viewDefinition,tableProfile,location,tableQueries,dataModel,tests,extension"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "table",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Table"
                  }
                }
              }
            },
            "404" : {
              "description" : "Table for instance {id} is not found"
            }
          }
        }
      },
      "/v1/tables/{id}" : {
        "get" : {
          "tags" : [ "tables" ],
          "summary" : "Get a table",
          "description" : "Get a table by `id`",
          "operationId" : "getTableByID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "table Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "tableConstraints,tablePartition,usageSummary,owner,profileSample,profileQuery,customMetrics,tags,followers,joins,sampleData,viewDefinition,tableProfile,location,tableQueries,dataModel,tests,extension"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "table",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Table"
                  }
                }
              }
            },
            "404" : {
              "description" : "Table for instance {id} is not found"
            }
          }
        },
        "delete" : {
          "tags" : [ "tables" ],
          "summary" : "Delete a table",
          "description" : "Delete a table by `id`.",
          "operationId" : "deleteTable",
          "parameters" : [ {
            "name" : "hardDelete",
            "in" : "query",
            "description" : "Hard delete the entity. (Default = `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the table",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "Table for instance {id} is not found"
            }
          }
        },
        "patch" : {
          "tags" : [ "tables" ],
          "summary" : "Update a table",
          "description" : "Update an existing table using JsonPatch.",
          "externalDocs" : {
            "description" : "JsonPatch RFC",
            "url" : "https://tools.ietf.org/html/rfc6902"
          },
          "operationId" : "patchTable",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the table",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "JsonPatch with array of operations",
            "content" : {
              "application/json-patch+json" : {
                "schema" : {
                  "type" : "object"
                },
                "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
              }
            }
          },
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/tables/{id}/columnTest" : {
        "put" : {
          "tags" : [ "tables" ],
          "summary" : "Add column test cases",
          "description" : "Add column test cases to the table.",
          "operationId" : "addColumnTest",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the table",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateColumnTest"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "OK",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Table"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/tables/{id}/columnTest/{columnName}/{columnTestType}" : {
        "delete" : {
          "tags" : [ "tables" ],
          "summary" : "delete column test case",
          "description" : "Delete column test case from the table.",
          "operationId" : "deleteColumnTest",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the table",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "columnName",
            "in" : "path",
            "description" : "column of the table",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "columnTestType",
            "in" : "path",
            "description" : "column Test Type",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Table"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/tables/{id}/customMetric" : {
        "put" : {
          "tags" : [ "tables" ],
          "summary" : "Add column custom metrics",
          "description" : "Add column custom metrics.",
          "operationId" : "addCustomMetric",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the table",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateCustomMetric"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "OK",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Table"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/tables/{id}/customMetric/{columnName}/{customMetricName}" : {
        "delete" : {
          "tags" : [ "tables" ],
          "summary" : "delete custom metric from a column",
          "description" : "Delete a custom metric from a column.",
          "operationId" : "deleteCustomMetric",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the table",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "columnName",
            "in" : "path",
            "description" : "column of the table",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "customMetricName",
            "in" : "path",
            "description" : "column Test Type",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Table"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/tables/{id}/dataModel" : {
        "put" : {
          "tags" : [ "tables" ],
          "summary" : "Add data modeling information to a table",
          "description" : "Add data modeling (such as DBT model) information on how the table was created to the table.",
          "operationId" : "addDataModel",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the table",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DataModel"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "OK",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Table"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/tables/{id}/followers" : {
        "put" : {
          "tags" : [ "tables" ],
          "summary" : "Add a follower",
          "description" : "Add a user identified by `userId` as followed of this table",
          "operationId" : "addFollowerToTable",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the table",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "Id of the user to be added as follower",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "OK",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ChangeEvent"
                  }
                }
              }
            },
            "404" : {
              "description" : "Table for instance {id} is not found"
            }
          }
        }
      },
      "/v1/tables/{id}/followers/{userId}" : {
        "delete" : {
          "tags" : [ "tables" ],
          "summary" : "Remove a follower",
          "description" : "Remove the user identified `userId` as a follower of the table.",
          "operationId" : "deleteFollower",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the table",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "userId",
            "in" : "path",
            "description" : "Id of the user being removed as follower",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ChangeEvent"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/tables/{id}/joins" : {
        "put" : {
          "tags" : [ "tables" ],
          "summary" : "Add table join information",
          "description" : "Add information about other tables that this table is joined with. Join information can only be added for the last 30 days starting today.",
          "operationId" : "addTableJoinInfo",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the table",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableJoins"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "Successfully updated the Table",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Table"
                  }
                }
              }
            },
            "404" : {
              "description" : "Table for instance {id} is not found"
            },
            "400" : {
              "description" : "Date range can only include past 30 days starting today"
            }
          }
        }
      },
      "/v1/tables/{id}/location" : {
        "put" : {
          "tags" : [ "tables" ],
          "summary" : "Add a location",
          "description" : "Add a location identified by `locationId` to this table",
          "operationId" : "addLocationToTable",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the table",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "Id of the location to be added",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "OK",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Table"
                  }
                }
              }
            },
            "404" : {
              "description" : "Table for instance {id} is not found"
            }
          }
        },
        "delete" : {
          "tags" : [ "tables" ],
          "summary" : "Remove the location",
          "description" : "Remove the location",
          "operationId" : "deleteLocation_1",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the table",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Table"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/tables/{id}/sampleData" : {
        "put" : {
          "tags" : [ "tables" ],
          "summary" : "Add sample data",
          "description" : "Add sample data to the table.",
          "operationId" : "addSampleData",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the table",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableData"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "Successfully update the Table",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Table"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/tables/{id}/tableProfile" : {
        "put" : {
          "tags" : [ "tables" ],
          "summary" : "Add table profile data",
          "description" : "Add table profile data to the table.",
          "operationId" : "addDataProfiler",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the table",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TableProfile"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "Successfully updated the Table ",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Table"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/tables/{id}/tableQuery" : {
        "put" : {
          "tags" : [ "tables" ],
          "summary" : "Add table query data",
          "description" : "Add table query data to the table.",
          "operationId" : "addTableQuery",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the table",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SQLQuery"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "OK",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Table"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/tables/{id}/tableTest" : {
        "put" : {
          "tags" : [ "tables" ],
          "summary" : "Add table test cases",
          "description" : "Add test cases to the table.",
          "operationId" : "addTableTest",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the table",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateTableTest"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "OK",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Table"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/tables/{id}/tableTest/{tableTestType}" : {
        "delete" : {
          "tags" : [ "tables" ],
          "summary" : "delete table test case",
          "description" : "Delete test case from the table.",
          "operationId" : "deleteTableTest",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the table",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "tableTestType",
            "in" : "path",
            "description" : "Table Test Type",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Table"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/tables/{id}/versions" : {
        "get" : {
          "tags" : [ "tables" ],
          "summary" : "List table versions",
          "description" : "Get a list of all the versions of a table identified by `id`",
          "operationId" : "listAllTableVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "table Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of table versions",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityHistory"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/tables/{id}/versions/{version}" : {
        "get" : {
          "tags" : [ "tables" ],
          "summary" : "Get a version of the table",
          "description" : "Get a version of the table by given `id`",
          "operationId" : "getSpecificDatabaseVersion_1",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "table Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "version",
            "in" : "path",
            "description" : "table version number in the form `major`.`minor`",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "0.1 or 1.1"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "table",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Table"
                  }
                }
              }
            },
            "404" : {
              "description" : "Table for instance {id} and version {version} is not found"
            }
          }
        }
      },
      "/v1/tags" : {
        "get" : {
          "tags" : [ "tags" ],
          "summary" : "List tag categories",
          "description" : "Get a list of tag categories.",
          "operationId" : "listTagCategories",
          "parameters" : [ {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "usageCount"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The user ",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/CategoryList"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "tags" ],
          "summary" : "Create a tag category",
          "description" : "Create a new tag category. The request can include the children tags to be created along with the tag category.",
          "operationId" : "createTagCategory",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateTagCategory"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The user ",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/TagCategory"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/tags/{category}" : {
        "get" : {
          "tags" : [ "tags" ],
          "summary" : "Get a tag category",
          "description" : "Get a tag category identified by name. The response includes tag category information along with the entire hierarchy of all the children tags.",
          "operationId" : "getTagCategoryByName",
          "parameters" : [ {
            "name" : "category",
            "in" : "path",
            "description" : "Tag category name",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "usageCount"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The user ",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/TagCategory"
                  }
                }
              }
            },
            "404" : {
              "description" : "TagCategory for instance {category} is not found"
            }
          }
        },
        "put" : {
          "tags" : [ "tags" ],
          "summary" : "Update a tag category",
          "description" : "Update an existing category identify by category name",
          "operationId" : "createOrUpdateTagCategory",
          "parameters" : [ {
            "name" : "category",
            "in" : "path",
            "description" : "Tag category name",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateTagCategory"
                }
              }
            }
          },
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "tags" ],
          "summary" : "Create a primary tag",
          "description" : "Create a primary tag in the given tag category.",
          "operationId" : "createPrimaryTag",
          "parameters" : [ {
            "name" : "category",
            "in" : "path",
            "description" : "Tag category name",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateTag"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The user ",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Tag"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/tags/{category}/{id}" : {
        "delete" : {
          "tags" : [ "tags" ],
          "summary" : "Delete tag",
          "description" : "Delete a tag and all the tags under it.",
          "operationId" : "deleteTags",
          "parameters" : [ {
            "name" : "category",
            "in" : "path",
            "description" : "Tag id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Tag id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/tags/{category}/{primaryTag}" : {
        "get" : {
          "tags" : [ "tags" ],
          "summary" : "Get a primary tag",
          "description" : "Get a primary tag identified by name. The response includes with the entire hierarchy of all the children tags.",
          "operationId" : "getPrimaryTag",
          "parameters" : [ {
            "name" : "category",
            "in" : "path",
            "description" : "Tag category name",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "primaryTag",
            "in" : "path",
            "description" : "Primary tag name",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "<primaryTag> fully qualified name <categoryName>.<primaryTag>"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "usageCount"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The user ",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Tag"
                  }
                }
              }
            },
            "404" : {
              "description" : "Tag for instance {primaryTag} is not found"
            }
          }
        },
        "put" : {
          "tags" : [ "tags" ],
          "summary" : "Update a primaryTag",
          "description" : "Update an existing primaryTag identify by name",
          "operationId" : "createOrUpdatePrimaryTag",
          "parameters" : [ {
            "name" : "category",
            "in" : "path",
            "description" : "Tag category name",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "primaryTag",
            "in" : "path",
            "description" : "Primary tag name",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "<primaryTag> fully qualified name <categoryName>.<primaryTag>"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateTag"
                }
              }
            }
          },
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "tags" ],
          "summary" : "Create a secondary tag",
          "description" : "Create a secondary tag under the given primary tag.",
          "operationId" : "createSecondaryTag",
          "parameters" : [ {
            "name" : "category",
            "in" : "path",
            "description" : "Tag category name",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "primaryTag",
            "in" : "path",
            "description" : "Primary tag name",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "<primaryTag> fully qualified name <categoryName>.<primaryTag>"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateTag"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The user ",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Tag"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/tags/{category}/{primaryTag}/{secondaryTag}" : {
        "get" : {
          "tags" : [ "tags" ],
          "summary" : "Get a secondary tag",
          "description" : "Get a secondary tag identified by name.",
          "operationId" : "getSecondaryTag",
          "parameters" : [ {
            "name" : "category",
            "in" : "path",
            "description" : "Tag category name",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "primaryTag",
            "in" : "path",
            "description" : "Primary tag name",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "<primaryTag> fully qualified name <categoryName>.<primaryTag>"
            }
          }, {
            "name" : "secondaryTag",
            "in" : "path",
            "description" : "Secondary tag name",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "<secondaryTag> fully qualified name <categoryName>.<primaryTag>.<SecondaryTag>"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "usageCount"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The user ",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Tag"
                  }
                }
              }
            },
            "404" : {
              "description" : "Tag for instance {secondaryTag} is not found"
            }
          }
        },
        "put" : {
          "tags" : [ "tags" ],
          "summary" : "Update a secondaryTag",
          "description" : "Update an existing secondaryTag identify by name",
          "operationId" : "createOrUpdateSecondaryTag",
          "parameters" : [ {
            "name" : "category",
            "in" : "path",
            "description" : "Tag category name",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "primaryTag",
            "in" : "path",
            "description" : "Primary tag name",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "<primaryTag> fully qualified name <categoryName>.<primaryTag>"
            }
          }, {
            "name" : "secondaryTag",
            "in" : "path",
            "description" : "SecondaryTag tag name",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "<secondaryTag> fully qualified name <categoryName>.<primaryTag>.<secondaryTag>"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateTag"
                }
              }
            }
          },
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/tags/{id}" : {
        "delete" : {
          "tags" : [ "tags" ],
          "summary" : "Delete tag category",
          "description" : "Delete a tag category and all the tags under it.",
          "operationId" : "deleteTagCategory",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Tag category id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/teams" : {
        "get" : {
          "tags" : [ "teams" ],
          "summary" : "List teams",
          "description" : "Get a list of teams. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
          "operationId" : "listTeams",
          "parameters" : [ {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,profile,users,owns,defaultRoles"
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "description" : "Limit the number of teams returned. (1 to 1000000, default = 10)",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of teams before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of teams after this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of teams",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/TeamList"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "teams" ],
          "summary" : "Update team",
          "description" : "Create or Update a team.",
          "operationId" : "createOrUpdateTeam",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateTeam"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The team ",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Team"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        },
        "post" : {
          "tags" : [ "teams" ],
          "summary" : "Create a team",
          "description" : "Create a new team.",
          "operationId" : "createTeam",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateTeam"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The team",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Team"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/teams/name/{name}" : {
        "get" : {
          "tags" : [ "teams" ],
          "summary" : "Get a team by name",
          "description" : "Get a team by `name`.",
          "operationId" : "getTeamByFQN",
          "parameters" : [ {
            "name" : "name",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,profile,users,owns,defaultRoles"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The team",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Team"
                  }
                }
              }
            },
            "404" : {
              "description" : "Team for instance {name} is not found"
            }
          }
        }
      },
      "/v1/teams/{id}" : {
        "get" : {
          "tags" : [ "teams" ],
          "summary" : "Get a team",
          "description" : "Get a team by `id`.",
          "operationId" : "getTeamByID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,profile,users,owns,defaultRoles"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The team",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Team"
                  }
                }
              }
            },
            "404" : {
              "description" : "Team for instance {id} is not found"
            }
          }
        },
        "delete" : {
          "tags" : [ "teams" ],
          "summary" : "Delete a team",
          "description" : "Delete a team by given `id`.",
          "operationId" : "deleteTeam",
          "parameters" : [ {
            "name" : "hardDelete",
            "in" : "query",
            "description" : "Hard delete the entity. (Default = `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Team Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "Team for instance {id} is not found"
            }
          }
        },
        "patch" : {
          "tags" : [ "teams" ],
          "summary" : "Update a team",
          "description" : "Update an existing team with JsonPatch.",
          "externalDocs" : {
            "description" : "JsonPatch RFC",
            "url" : "https://tools.ietf.org/html/rfc6902"
          },
          "operationId" : "patchTeam",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "JsonPatch with array of operations",
            "content" : {
              "application/json-patch+json" : {
                "schema" : {
                  "type" : "object"
                },
                "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
              }
            }
          },
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/teams/{id}/versions" : {
        "get" : {
          "tags" : [ "teams" ],
          "summary" : "List team versions",
          "description" : "Get a list of all the versions of a team identified by `id`",
          "operationId" : "listAllTeamVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "team Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of team versions",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityHistory"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/teams/{id}/versions/{version}" : {
        "get" : {
          "tags" : [ "teams" ],
          "summary" : "Get a version of the team",
          "description" : "Get a version of the team by given `id`",
          "operationId" : "getSpecificRoleVersion_1",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Team Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "version",
            "in" : "path",
            "description" : "Team version number in the form `major`.`minor`",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "0.1 or 1.1"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "team",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Team"
                  }
                }
              }
            },
            "404" : {
              "description" : "Team for instance {id} and version {version} is not found"
            }
          }
        }
      },
      "/v1/topics" : {
        "get" : {
          "tags" : [ "topics" ],
          "summary" : "List topics",
          "description" : "Get a list of topics, optionally filtered by `service` it belongs to. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
          "operationId" : "listTopics",
          "parameters" : [ {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,followers,tags,sampleData"
            }
          }, {
            "name" : "service",
            "in" : "query",
            "description" : "Filter topics by service name",
            "schema" : {
              "type" : "string",
              "example" : "kafkaWestCoast"
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "description" : "Limit the number topics returned. (1 to 1000000, default = 10)",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of topics before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of topics after this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of topics",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/TopicList"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "topics" ],
          "summary" : "Update topic",
          "description" : "Create a topic, it it does not exist or update an existing topic.",
          "operationId" : "createOrUpdateTopic",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateTopic"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The updated topic ",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Topic"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "topics" ],
          "summary" : "Create a topic",
          "description" : "Create a topic under an existing `service`.",
          "operationId" : "createTopic",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateTopic"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The topic",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Topic"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/topics/name/{fqn}" : {
        "get" : {
          "tags" : [ "topics" ],
          "summary" : "Get a topic by name",
          "description" : "Get a topic by fully qualified name.",
          "operationId" : "getTopicByFQN",
          "parameters" : [ {
            "name" : "fqn",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,followers,tags,sampleData"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The topic",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Topic"
                  }
                }
              }
            },
            "404" : {
              "description" : "Topic for instance {id} is not found"
            }
          }
        }
      },
      "/v1/topics/{id}" : {
        "get" : {
          "tags" : [ "topics" ],
          "summary" : "Get a topic",
          "description" : "Get a topic by `id`.",
          "operationId" : "get",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "owner,followers,tags,sampleData"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The topic",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Topic"
                  }
                }
              }
            },
            "404" : {
              "description" : "Topic for instance {id} is not found"
            }
          }
        },
        "delete" : {
          "tags" : [ "topics" ],
          "summary" : "Delete a topic",
          "description" : "Delete a topic by `id`.",
          "operationId" : "deleteTopic",
          "parameters" : [ {
            "name" : "hardDelete",
            "in" : "query",
            "description" : "Hard delete the entity. (Default = `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Topic Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "Topic for instance {id} is not found"
            }
          }
        },
        "patch" : {
          "tags" : [ "topics" ],
          "summary" : "Update a topic",
          "description" : "Update an existing topic using JsonPatch.",
          "externalDocs" : {
            "description" : "JsonPatch RFC",
            "url" : "https://tools.ietf.org/html/rfc6902"
          },
          "operationId" : "patchTopic",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "JsonPatch with array of operations",
            "content" : {
              "application/json-patch+json" : {
                "schema" : {
                  "type" : "object"
                },
                "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
              }
            }
          },
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/topics/{id}/followers" : {
        "put" : {
          "tags" : [ "topics" ],
          "summary" : "Add a follower",
          "description" : "Add a user identified by `userId` as followed of this topic",
          "operationId" : "addFollower_3",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the topic",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "Id of the user to be added as follower",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "OK",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ChangeEvent"
                  }
                }
              }
            },
            "404" : {
              "description" : "Topic for instance {id} is not found"
            }
          }
        }
      },
      "/v1/topics/{id}/followers/{userId}" : {
        "delete" : {
          "tags" : [ "topics" ],
          "summary" : "Remove a follower",
          "description" : "Remove the user identified `userId` as a follower of the topic.",
          "operationId" : "deleteFollower_4",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the topic",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "userId",
            "in" : "path",
            "description" : "Id of the user being removed as follower",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ChangeEvent"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/topics/{id}/sampleData" : {
        "put" : {
          "tags" : [ "topics" ],
          "summary" : "Add sample data",
          "description" : "Add sample data to the topic.",
          "operationId" : "addSampleData_1",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Id of the topic",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TopicSampleData"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The topic",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Topic"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/topics/{id}/versions" : {
        "get" : {
          "tags" : [ "topics" ],
          "summary" : "List topic versions",
          "description" : "Get a list of all the versions of a topic identified by `id`",
          "operationId" : "listAllTopicVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Topic Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of topic versions",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityHistory"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/topics/{id}/versions/{version}" : {
        "get" : {
          "tags" : [ "topics" ],
          "summary" : "Get a version of the topic",
          "description" : "Get a version of the topic by given `id`",
          "operationId" : "getSpecificTopicVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "Topic Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "version",
            "in" : "path",
            "description" : "Topic version number in the form `major`.`minor`",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "0.1 or 1.1"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "topic",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Topic"
                  }
                }
              }
            },
            "404" : {
              "description" : "Topic for instance {id} and version {version} is not found"
            }
          }
        }
      },
      "/v1/usage/{entity}/name/{fqn}" : {
        "get" : {
          "tags" : [ "usage" ],
          "summary" : "Get usage by name",
          "description" : "Get usage details for an entity identified by fully qualified name.",
          "operationId" : "getEntityUsageByFQN",
          "parameters" : [ {
            "name" : "entity",
            "in" : "path",
            "description" : "Entity type for which usage is requested",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "table, report, metrics, or dashboard"
            }
          }, {
            "name" : "fqn",
            "in" : "path",
            "description" : "Fully qualified name of the entity that uniquely identifies an entity",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "days",
            "in" : "query",
            "description" : "Usage for number of days going back from the given date (default=1, min=1, max=30)",
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "date",
            "in" : "query",
            "description" : "Usage for number of days going back from this date in ISO 8601 format (default = currentDate)",
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Entity usage",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityUsage"
                  }
                }
              }
            },
            "404" : {
              "description" : "Entity for instance {id} is not found"
            }
          }
        },
        "post" : {
          "tags" : [ "usage" ],
          "summary" : "Report usage by name",
          "description" : "Report usage information for an entity by name on a given date. System stores last 30 days of usage information. Usage information older than 30 days is deleted.",
          "operationId" : "reportEntityUsageWithFQN",
          "parameters" : [ {
            "name" : "entity",
            "in" : "path",
            "description" : "Entity type for which usage is reported",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "table, report, metrics, or dashboard"
            }
          }, {
            "name" : "fqn",
            "in" : "path",
            "description" : "Fully qualified name of the entity that uniquely identifies an entity",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "Usage information a given date",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DailyCount"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "Usage information",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityUsage"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/usage/{entity}/{id}" : {
        "get" : {
          "tags" : [ "usage" ],
          "summary" : "Get usage",
          "description" : "Get usage details for an entity identified by `id`.",
          "operationId" : "getEntityUsageByID",
          "parameters" : [ {
            "name" : "entity",
            "in" : "path",
            "description" : "Entity type for which usage is requested",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "table, report, metrics, or dashboard"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Entity id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "days",
            "in" : "query",
            "description" : "Usage for number of days going back from the given date (default=1, min=1, max=30)",
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          }, {
            "name" : "date",
            "in" : "query",
            "description" : "Usage for number of days going back from this date in ISO 8601 format. (default = currentDate)",
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Entity usage",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityUsage"
                  }
                }
              }
            },
            "404" : {
              "description" : "Entity for instance {id} is not found"
            }
          }
        },
        "post" : {
          "tags" : [ "usage" ],
          "summary" : "Report usage",
          "description" : "Report usage information for an entity on a given date. System stores last 30 days of usage information. Usage information older than 30 days is deleted.",
          "operationId" : "reportEntityUsageWithID",
          "parameters" : [ {
            "name" : "entity",
            "in" : "path",
            "description" : "Entity type for which usage is reported",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "table, report, metrics, or dashboard"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "Entity id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "Usage information a given date",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DailyCount"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "Usage information",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityUsage"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/users" : {
        "get" : {
          "tags" : [ "users" ],
          "summary" : "List users",
          "description" : "Get a list of users. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
          "operationId" : "listUsers",
          "parameters" : [ {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "profile,roles,teams,follows,owns"
            }
          }, {
            "name" : "team",
            "in" : "query",
            "description" : "Filter users by team",
            "schema" : {
              "type" : "string",
              "example" : "Legal"
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "description" : "Limit the number users returned. (1 to 1000000, default = 10)",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of users before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of users after this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The user ",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/UserList"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "users" ],
          "summary" : "Update user",
          "description" : "Create or Update a user.",
          "operationId" : "createOrUpdateUser",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateUser"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The user ",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/CreateUser"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        },
        "post" : {
          "tags" : [ "users" ],
          "summary" : "Create a user",
          "description" : "Create a new user.",
          "operationId" : "createUser",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateUser"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The user ",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/users/generateToken/{id}" : {
        "put" : {
          "tags" : [ "users" ],
          "summary" : "Generate JWT Token for a Bot User",
          "description" : "Generate JWT Token for a Bot User.",
          "operationId" : "generateJWTTokenForBotUser",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenerateTokenRequest"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "The user ",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "string",
                    "enum" : [ "7", "30", "60", "90", "Unlimited" ]
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/users/loggedInUser" : {
        "get" : {
          "tags" : [ "users" ],
          "summary" : "Get current logged in user",
          "description" : "Get the user who is authenticated and is currently logged in.",
          "operationId" : "getCurrentLoggedInUser",
          "parameters" : [ {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "profile,roles,teams,follows,owns"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The user",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            },
            "404" : {
              "description" : "User not found"
            }
          }
        }
      },
      "/v1/users/name/{name}" : {
        "get" : {
          "tags" : [ "users" ],
          "summary" : "Get a user by name",
          "description" : "Get a user by `name`.",
          "operationId" : "getUserByFQN",
          "parameters" : [ {
            "name" : "name",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "profile,roles,teams,follows,owns"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The user",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            },
            "404" : {
              "description" : "User for instance {id} is not found"
            }
          }
        }
      },
      "/v1/users/revokeToken/{id}" : {
        "put" : {
          "tags" : [ "users" ],
          "summary" : "Revoke JWT Token for a Bot User",
          "description" : "Revoke JWT Token for a Bot User.",
          "operationId" : "revokeJWTTokenForBotUser",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The user ",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/JWTAuthMechanism"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/users/token/{id}" : {
        "get" : {
          "tags" : [ "users" ],
          "summary" : "Get JWT Token for a Bot User",
          "description" : "Get JWT Token for a Bot User.",
          "operationId" : "getJWTTokenForBotUser",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The user ",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/JWTAuthMechanism"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/users/{id}" : {
        "get" : {
          "tags" : [ "users" ],
          "summary" : "Get a user",
          "description" : "Get a user by `id`",
          "operationId" : "getUserByID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "fields",
            "in" : "query",
            "description" : "Fields requested in the returned resource",
            "schema" : {
              "type" : "string",
              "example" : "profile,roles,teams,follows,owns"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The user",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            },
            "404" : {
              "description" : "User for instance {id} is not found"
            }
          }
        },
        "delete" : {
          "tags" : [ "users" ],
          "summary" : "Delete a user",
          "description" : "Users can't be deleted but are soft-deleted.",
          "operationId" : "deleteUser",
          "parameters" : [ {
            "name" : "hardDelete",
            "in" : "query",
            "description" : "Hard delete the entity. (Default = `false`)",
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "User Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "OK"
            },
            "404" : {
              "description" : "User for instance {id} is not found"
            }
          }
        },
        "patch" : {
          "tags" : [ "users" ],
          "summary" : "Update a user",
          "description" : "Update an existing user using JsonPatch.",
          "externalDocs" : {
            "description" : "JsonPatch RFC",
            "url" : "https://tools.ietf.org/html/rfc6902"
          },
          "operationId" : "patchUser",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "JsonPatch with array of operations",
            "content" : {
              "application/json-patch+json" : {
                "schema" : {
                  "type" : "object"
                },
                "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
              }
            }
          },
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/users/{id}/versions" : {
        "get" : {
          "tags" : [ "users" ],
          "summary" : "List user versions",
          "description" : "Get a list of all the versions of a user identified by `id`",
          "operationId" : "listAllUserVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "user Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of user versions",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityHistory"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/users/{id}/versions/{version}" : {
        "get" : {
          "tags" : [ "users" ],
          "summary" : "Get a version of the user",
          "description" : "Get a version of the user by given `id`",
          "operationId" : "getSpecificUserVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "User Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "version",
            "in" : "path",
            "description" : "User version number in the form `major`.`minor`",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "0.1 or 1.1"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "user",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            },
            "404" : {
              "description" : "User for instance {id} and version {version} is not found"
            }
          }
        }
      },
      "/v1/version" : {
        "get" : {
          "tags" : [ "catalog" ],
          "summary" : "Get version of metadata service",
          "description" : "Get the build version of OpenMetadata service and build timestamp.",
          "operationId" : "getCatalogVersion",
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/CatalogVersion"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/webhook" : {
        "get" : {
          "tags" : [ "webhook" ],
          "summary" : "List webhooks",
          "description" : "Get a list of webhook subscriptions",
          "operationId" : "listWebHooks",
          "parameters" : [ {
            "name" : "status",
            "in" : "query",
            "description" : "Filter webhooks by status",
            "schema" : {
              "type" : "string",
              "example" : "active"
            }
          }, {
            "name" : "limit",
            "in" : "query",
            "description" : "Limit the number webhooks returned. (1 to 1000000, default = 10) ",
            "schema" : {
              "maximum" : 1000000,
              "minimum" : 0,
              "type" : "integer",
              "format" : "int32",
              "default" : 10
            }
          }, {
            "name" : "before",
            "in" : "query",
            "description" : "Returns list of webhooks before this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "after",
            "in" : "query",
            "description" : "Returns list of webhooks after this cursor",
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of webhooks",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/WebhookList"
                  }
                }
              }
            }
          }
        },
        "put" : {
          "tags" : [ "webhook" ],
          "summary" : "Updated an existing or create a new webhook",
          "description" : "Updated an existing or create a new webhook",
          "operationId" : "createOrUpdateWebhook",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateWebhook"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "webhook",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Webhook"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        },
        "post" : {
          "tags" : [ "webhook" ],
          "summary" : "Subscribe to a new webhook",
          "description" : "Subscribe to a new webhook",
          "operationId" : "createWebHook",
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateWebhook"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "webhook",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Webhook"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad request"
            }
          }
        }
      },
      "/v1/webhook/name/{name}" : {
        "get" : {
          "tags" : [ "webhook" ],
          "summary" : "Get a webhook by name",
          "description" : "Get a webhook by name.",
          "operationId" : "getWebHookByFQN",
          "parameters" : [ {
            "name" : "name",
            "in" : "path",
            "description" : "Name of the webhook",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "webhook",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Webhook"
                  }
                }
              }
            },
            "404" : {
              "description" : "Webhook for instance {id} is not found"
            }
          }
        }
      },
      "/v1/webhook/{id}" : {
        "get" : {
          "tags" : [ "webhook" ],
          "summary" : "Get a webhook",
          "description" : "Get a webhook by given Id",
          "operationId" : "getWebHookByID",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "webhook Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Include all, deleted, or non-deleted entities.",
            "schema" : {
              "type" : "string",
              "default" : "non-deleted",
              "enum" : [ "all", "deleted", "non-deleted" ]
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Entity events",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Webhook"
                  }
                }
              }
            },
            "404" : {
              "description" : "Entity for instance {id} is not found"
            }
          }
        },
        "delete" : {
          "tags" : [ "webhook" ],
          "summary" : "Delete a webhook",
          "description" : "Get a webhook by given Id",
          "operationId" : "deleteWebHook",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "webhook Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Entity events",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Webhook"
                  }
                }
              }
            },
            "404" : {
              "description" : "Entity for instance {id} is not found"
            }
          }
        },
        "patch" : {
          "tags" : [ "webhook" ],
          "summary" : "Update a webhook",
          "description" : "Update an existing webhook using JsonPatch.",
          "externalDocs" : {
            "description" : "JsonPatch RFC",
            "url" : "https://tools.ietf.org/html/rfc6902"
          },
          "operationId" : "patchWebHook",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "JsonPatch with array of operations",
            "content" : {
              "application/json-patch+json" : {
                "schema" : {
                  "type" : "object"
                },
                "example" : "[{op:remove, path:/a},{op:add, path: /b, value: val}]"
              }
            }
          },
          "responses" : {
            "default" : {
              "description" : "default response",
              "content" : {
                "application/json" : { }
              }
            }
          }
        }
      },
      "/v1/webhook/{id}/versions" : {
        "get" : {
          "tags" : [ "webhook" ],
          "summary" : "List webhook versions",
          "description" : "Get a list of all the versions of a webhook identified by `id`",
          "operationId" : "listAllWebHookVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "webhook Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "List of webhook versions",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EntityHistory"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/webhook/{id}/versions/{version}" : {
        "get" : {
          "tags" : [ "webhook" ],
          "summary" : "Get a version of the webhook",
          "description" : "Get a version of the webhook by given `id`",
          "operationId" : "getSpecificWebhookVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "webhook Id",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "version",
            "in" : "path",
            "description" : "webhook version number in the form `major`.`minor`",
            "required" : true,
            "schema" : {
              "type" : "string",
              "example" : "0.1 or 1.1"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "webhook",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Webhook"
                  }
                }
              }
            },
            "404" : {
              "description" : "Webhook for instance {id} and version {version} is not found"
            }
          }
        }
      }
    },
    "components" : {
      "schemas" : {
        "AddLineage" : {
          "required" : [ "edge" ],
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "edge" : {
              "$ref" : "#/components/schemas/EntitiesEdge"
            }
          }
        },
        "Aggregation" : {
          "type" : "object",
          "properties" : {
            "fragment" : {
              "type" : "boolean"
            },
            "metadata" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            },
            "name" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "AggregationProfileShardResult" : {
          "type" : "object",
          "properties" : {
            "fragment" : {
              "type" : "boolean"
            },
            "profileResults" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ProfileResult"
              }
            }
          }
        },
        "Aggregations" : {
          "type" : "object",
          "properties" : {
            "asMap" : {
              "type" : "object",
              "additionalProperties" : {
                "$ref" : "#/components/schemas/Aggregation"
              }
            },
            "fragment" : {
              "type" : "boolean"
            }
          }
        },
        "AirflowConfig" : {
          "type" : "object",
          "properties" : {
            "concurrency" : {
              "type" : "integer",
              "format" : "int32"
            },
            "email" : {
              "maxLength" : 127,
              "minLength" : 6,
              "pattern" : "^\\S+@\\S+\\.\\S+$",
              "type" : "string"
            },
            "endDate" : {
              "type" : "string",
              "format" : "date-time"
            },
            "maxActiveRuns" : {
              "type" : "integer",
              "format" : "int32"
            },
            "pausePipeline" : {
              "type" : "boolean"
            },
            "pipelineCatchup" : {
              "type" : "boolean"
            },
            "pipelineTimezone" : {
              "type" : "string"
            },
            "retries" : {
              "type" : "integer",
              "format" : "int32"
            },
            "retryDelay" : {
              "type" : "integer",
              "format" : "int32"
            },
            "scheduleInterval" : {
              "type" : "string"
            },
            "startDate" : {
              "type" : "string",
              "format" : "date-time"
            },
            "workflowDefaultView" : {
              "type" : "string"
            },
            "workflowDefaultViewOrientation" : {
              "type" : "string"
            },
            "workflowTimeout" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        },
        "AirflowConfigurationForAPI" : {
          "required" : [ "apiEndpoint" ],
          "type" : "object",
          "properties" : {
            "apiEndpoint" : {
              "type" : "string"
            }
          }
        },
        "AuthenticationConfiguration" : {
          "type" : "object",
          "properties" : {
            "authority" : {
              "type" : "string"
            },
            "callbackUrl" : {
              "type" : "string"
            },
            "clientId" : {
              "type" : "string"
            },
            "jwtPrincipalClaims" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "provider" : {
              "type" : "string"
            },
            "providerName" : {
              "type" : "string"
            },
            "publicKey" : {
              "type" : "string"
            },
            "publicKeyUrls" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        },
        "AuthenticationMechanism" : {
          "type" : "object",
          "properties" : {
            "authType" : {
              "type" : "string",
              "enum" : [ "JWT", "SSO" ]
            },
            "config" : {
              "type" : "object"
            }
          }
        },
        "AuthorizerConfiguration" : {
          "required" : [ "adminPrincipals", "botPrincipals", "className", "containerRequestFilter", "enableSecureSocketConnection", "enforcePrincipalDomain", "principalDomain" ],
          "type" : "object",
          "properties" : {
            "adminPrincipals" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "botPrincipals" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "className" : {
              "type" : "string"
            },
            "containerRequestFilter" : {
              "type" : "string"
            },
            "enableSecureSocketConnection" : {
              "type" : "boolean"
            },
            "enforcePrincipalDomain" : {
              "type" : "boolean"
            },
            "principalDomain" : {
              "type" : "string"
            }
          }
        },
        "Bot" : {
          "required" : [ "botUser", "id", "name" ],
          "type" : "object",
          "properties" : {
            "botUser" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "BotList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Bot"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "BytesReference" : {
          "type" : "object",
          "properties" : {
            "fragment" : {
              "type" : "boolean"
            }
          }
        },
        "CatalogVersion" : {
          "type" : "object",
          "properties" : {
            "revision" : {
              "type" : "string"
            },
            "timestamp" : {
              "type" : "integer",
              "format" : "int64"
            },
            "version" : {
              "type" : "string"
            }
          }
        },
        "CategoryList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagCategory"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ChangeDescription" : {
          "type" : "object",
          "properties" : {
            "fieldsAdded" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/FieldChange"
              }
            },
            "fieldsDeleted" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/FieldChange"
              }
            },
            "fieldsUpdated" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/FieldChange"
              }
            },
            "previousVersion" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "ChangeEvent" : {
          "required" : [ "entityId", "entityType", "eventType", "timestamp" ],
          "type" : "object",
          "properties" : {
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "currentVersion" : {
              "type" : "number",
              "format" : "double"
            },
            "entity" : {
              "type" : "object"
            },
            "entityFullyQualifiedName" : {
              "type" : "string"
            },
            "entityId" : {
              "type" : "string",
              "format" : "uuid"
            },
            "entityType" : {
              "type" : "string"
            },
            "eventType" : {
              "type" : "string",
              "enum" : [ "entityCreated", "entityUpdated", "entitySoftDeleted", "entityDeleted" ]
            },
            "previousVersion" : {
              "type" : "number",
              "format" : "double"
            },
            "timestamp" : {
              "type" : "integer",
              "format" : "int64"
            },
            "userName" : {
              "type" : "string"
            }
          }
        },
        "ChangeEventList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ChangeEvent"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "Chart" : {
          "required" : [ "id", "name", "service" ],
          "type" : "object",
          "properties" : {
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "chartType" : {
              "type" : "string",
              "enum" : [ "Line", "Table", "Bar", "Area", "Pie", "Histogram", "Scatter", "Text", "BoxPlot", "Other" ]
            },
            "chartUrl" : {
              "type" : "string"
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "service" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "serviceType" : {
              "type" : "string",
              "enum" : [ "Superset", "Looker", "Tableau", "Redash", "Metabase", "PowerBI", "Mode" ]
            },
            "tables" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "usageSummary" : {
              "$ref" : "#/components/schemas/UsageDetails"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "ChartList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Chart"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "CloseTask" : {
          "required" : [ "comment" ],
          "type" : "object",
          "properties" : {
            "comment" : {
              "type" : "string"
            }
          }
        },
        "Clusters" : {
          "type" : "object",
          "properties" : {
            "fragment" : {
              "type" : "boolean"
            },
            "skipped" : {
              "type" : "integer",
              "format" : "int32"
            },
            "successful" : {
              "type" : "integer",
              "format" : "int32"
            },
            "total" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        },
        "CollectionDescriptor" : {
          "type" : "object",
          "properties" : {
            "collection" : {
              "$ref" : "#/components/schemas/CollectionInfo"
            }
          }
        },
        "CollectionInfo" : {
          "type" : "object",
          "properties" : {
            "documentation" : {
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "images" : {
              "$ref" : "#/components/schemas/ImageList"
            },
            "name" : {
              "type" : "string"
            }
          }
        },
        "CollectionList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CollectionDescriptor"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "CollectorResult" : {
          "type" : "object",
          "properties" : {
            "fragment" : {
              "type" : "boolean"
            },
            "name" : {
              "type" : "string"
            },
            "profiledChildren" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CollectorResult"
              }
            },
            "reason" : {
              "type" : "string"
            },
            "time" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        },
        "Column" : {
          "required" : [ "dataType", "name" ],
          "type" : "object",
          "properties" : {
            "arrayDataType" : {
              "type" : "string",
              "enum" : [ "NUMBER", "TINYINT", "SMALLINT", "INT", "BIGINT", "BYTEINT", "BYTES", "FLOAT", "DOUBLE", "DECIMAL", "NUMERIC", "TIMESTAMP", "TIME", "DATE", "DATETIME", "INTERVAL", "STRING", "MEDIUMTEXT", "TEXT", "CHAR", "VARCHAR", "BOOLEAN", "BINARY", "VARBINARY", "ARRAY", "BLOB", "LONGBLOB", "MEDIUMBLOB", "MAP", "STRUCT", "UNION", "SET", "GEOGRAPHY", "ENUM", "JSON", "UUID" ]
            },
            "children" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Column"
              }
            },
            "columnTests" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ColumnTest"
              }
            },
            "constraint" : {
              "type" : "string",
              "enum" : [ "NULL", "NOT_NULL", "UNIQUE", "PRIMARY_KEY" ]
            },
            "customMetrics" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CustomMetric"
              }
            },
            "dataLength" : {
              "type" : "integer",
              "format" : "int32"
            },
            "dataType" : {
              "type" : "string",
              "enum" : [ "NUMBER", "TINYINT", "SMALLINT", "INT", "BIGINT", "BYTEINT", "BYTES", "FLOAT", "DOUBLE", "DECIMAL", "NUMERIC", "TIMESTAMP", "TIME", "DATE", "DATETIME", "INTERVAL", "STRING", "MEDIUMTEXT", "TEXT", "CHAR", "VARCHAR", "BOOLEAN", "BINARY", "VARBINARY", "ARRAY", "BLOB", "LONGBLOB", "MEDIUMBLOB", "MAP", "STRUCT", "UNION", "SET", "GEOGRAPHY", "ENUM", "JSON", "UUID" ]
            },
            "dataTypeDisplay" : {
              "type" : "string"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "jsonSchema" : {
              "type" : "string"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "ordinalPosition" : {
              "type" : "integer",
              "format" : "int32"
            },
            "precision" : {
              "type" : "integer",
              "format" : "int32"
            },
            "scale" : {
              "type" : "integer",
              "format" : "int32"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            }
          }
        },
        "ColumnJoin" : {
          "type" : "object",
          "properties" : {
            "columnName" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "joinedWith" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/JoinedWith"
              }
            }
          }
        },
        "ColumnLineage" : {
          "type" : "object",
          "properties" : {
            "fromColumns" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "function" : {
              "type" : "string"
            },
            "toColumn" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            }
          }
        },
        "ColumnProfile" : {
          "type" : "object",
          "properties" : {
            "customMetricsProfile" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CustomMetricProfile"
              }
            },
            "distinctCount" : {
              "type" : "number",
              "format" : "double"
            },
            "distinctProportion" : {
              "type" : "number",
              "format" : "double"
            },
            "duplicateCount" : {
              "type" : "number",
              "format" : "double"
            },
            "histogram" : {
              "$ref" : "#/components/schemas/Histogram"
            },
            "max" : {
              "type" : "number",
              "format" : "double"
            },
            "maxLength" : {
              "type" : "number",
              "format" : "double"
            },
            "mean" : {
              "type" : "number",
              "format" : "double"
            },
            "min" : {
              "type" : "number",
              "format" : "double"
            },
            "minLength" : {
              "type" : "number",
              "format" : "double"
            },
            "missingCount" : {
              "type" : "number",
              "format" : "double"
            },
            "missingPercentage" : {
              "type" : "number",
              "format" : "double"
            },
            "name" : {
              "type" : "string"
            },
            "nullCount" : {
              "type" : "number",
              "format" : "double"
            },
            "nullProportion" : {
              "type" : "number",
              "format" : "double"
            },
            "stddev" : {
              "type" : "number",
              "format" : "double"
            },
            "sum" : {
              "type" : "number",
              "format" : "double"
            },
            "uniqueCount" : {
              "type" : "number",
              "format" : "double"
            },
            "uniqueProportion" : {
              "type" : "number",
              "format" : "double"
            },
            "validCount" : {
              "type" : "number",
              "format" : "double"
            },
            "valuesCount" : {
              "type" : "number",
              "format" : "double"
            },
            "valuesPercentage" : {
              "type" : "number",
              "format" : "double"
            },
            "variance" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "ColumnTest" : {
          "required" : [ "columnName", "name", "testCase" ],
          "type" : "object",
          "properties" : {
            "columnName" : {
              "type" : "string"
            },
            "description" : {
              "type" : "string"
            },
            "executionFrequency" : {
              "type" : "string",
              "enum" : [ "Hourly", "Daily", "Weekly" ]
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "results" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TestCaseResult"
              }
            },
            "testCase" : {
              "$ref" : "#/components/schemas/ColumnTestCase"
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            }
          }
        },
        "ColumnTestCase" : {
          "type" : "object",
          "properties" : {
            "columnTestType" : {
              "type" : "string",
              "enum" : [ "columnValuesToBeUnique", "columnValuesToBeNotNull", "columnValuesToMatchRegex", "columnValuesToBeNotInSet", "columnValuesToBeInSet", "columnValuesToBeBetween", "columnValuesMissingCountToBeEqual", "columnValueLengthsToBeBetween", "columnValueMaxToBeBetween", "columnValueMinToBeBetween", "columnValuesSumToBeBetween" ]
            },
            "config" : {
              "type" : "object"
            }
          }
        },
        "CreateBot" : {
          "required" : [ "botUser", "name" ],
          "type" : "object",
          "properties" : {
            "botUser" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          }
        },
        "CreateChart" : {
          "required" : [ "name", "service" ],
          "type" : "object",
          "properties" : {
            "chartType" : {
              "type" : "string",
              "enum" : [ "Line", "Table", "Bar", "Area", "Pie", "Histogram", "Scatter", "Text", "BoxPlot", "Other" ]
            },
            "chartUrl" : {
              "type" : "string"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "service" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "tables" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            }
          }
        },
        "CreateColumnTest" : {
          "required" : [ "columnName", "testCase" ],
          "type" : "object",
          "properties" : {
            "columnName" : {
              "type" : "string"
            },
            "description" : {
              "type" : "string"
            },
            "executionFrequency" : {
              "type" : "string",
              "enum" : [ "Hourly", "Daily", "Weekly" ]
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "result" : {
              "$ref" : "#/components/schemas/TestCaseResult"
            },
            "testCase" : {
              "$ref" : "#/components/schemas/ColumnTestCase"
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            }
          }
        },
        "CreateCustomMetric" : {
          "required" : [ "columnName", "expression", "name" ],
          "type" : "object",
          "properties" : {
            "columnName" : {
              "type" : "string"
            },
            "description" : {
              "type" : "string"
            },
            "expression" : {
              "type" : "string"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            }
          }
        },
        "CreateDashboard" : {
          "required" : [ "name", "service" ],
          "type" : "object",
          "properties" : {
            "charts" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "dashboardUrl" : {
              "type" : "string"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "service" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            }
          }
        },
        "CreateDashboardService" : {
          "required" : [ "connection", "name", "serviceType" ],
          "type" : "object",
          "properties" : {
            "connection" : {
              "$ref" : "#/components/schemas/DashboardConnection"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "serviceType" : {
              "type" : "string",
              "enum" : [ "Superset", "Looker", "Tableau", "Redash", "Metabase", "PowerBI", "Mode" ]
            }
          }
        },
        "CreateDatabase" : {
          "required" : [ "name", "service" ],
          "type" : "object",
          "properties" : {
            "default" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "service" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          }
        },
        "CreateDatabaseSchema" : {
          "required" : [ "database", "name" ],
          "type" : "object",
          "properties" : {
            "database" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          }
        },
        "CreateDatabaseService" : {
          "required" : [ "connection", "name", "serviceType" ],
          "type" : "object",
          "properties" : {
            "connection" : {
              "$ref" : "#/components/schemas/DatabaseConnection"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "serviceType" : {
              "type" : "string",
              "enum" : [ "BigQuery", "Mysql", "Redshift", "Snowflake", "Postgres", "Mssql", "Hive", "Oracle", "Athena", "Presto", "Trino", "Vertica", "Glue", "MariaDB", "Druid", "Db2", "Clickhouse", "Databricks", "DynamoDB", "AzureSQL", "SingleStore", "SQLite", "DeltaLake", "Salesforce", "SampleData", "PinotDB", "Datalake" ]
            }
          }
        },
        "CreateGlossary" : {
          "required" : [ "description", "name" ],
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "reviewers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            }
          }
        },
        "CreateGlossaryTerm" : {
          "required" : [ "description", "glossary", "name" ],
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "glossary" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "parent" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "references" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TermReference"
              }
            },
            "relatedTerms" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "reviewers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "synonyms" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            }
          }
        },
        "CreateIngestionPipeline" : {
          "required" : [ "airflowConfig", "name", "pipelineType", "service", "sourceConfig" ],
          "type" : "object",
          "properties" : {
            "airflowConfig" : {
              "$ref" : "#/components/schemas/AirflowConfig"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "loggerLevel" : {
              "type" : "string",
              "enum" : [ "DEBUG", "INFO", "WARN", "ERROR" ]
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "pipelineType" : {
              "type" : "string",
              "enum" : [ "metadata", "usage", "profiler" ]
            },
            "service" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "sourceConfig" : {
              "$ref" : "#/components/schemas/SourceConfig"
            }
          }
        },
        "CreateLocation" : {
          "required" : [ "name", "service" ],
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "locationType" : {
              "type" : "string",
              "enum" : [ "Bucket", "Prefix", "Database", "Table", "Iceberg" ]
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "path" : {
              "type" : "string"
            },
            "service" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            }
          }
        },
        "CreateMessagingService" : {
          "required" : [ "connection", "name", "serviceType" ],
          "type" : "object",
          "properties" : {
            "connection" : {
              "$ref" : "#/components/schemas/MessagingConnection"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "serviceType" : {
              "type" : "string",
              "enum" : [ "Kafka", "Pulsar" ]
            }
          }
        },
        "CreateMlModel" : {
          "required" : [ "algorithm", "name", "service" ],
          "type" : "object",
          "properties" : {
            "algorithm" : {
              "type" : "string"
            },
            "dashboard" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "mlFeatures" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/MlFeature"
              }
            },
            "mlHyperParameters" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/MlHyperParameter"
              }
            },
            "mlStore" : {
              "$ref" : "#/components/schemas/MlStore"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "server" : {
              "type" : "string",
              "format" : "uri"
            },
            "service" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "target" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            }
          }
        },
        "CreateMlModelService" : {
          "required" : [ "connection", "name", "serviceType" ],
          "type" : "object",
          "properties" : {
            "connection" : {
              "$ref" : "#/components/schemas/MlModelConnection"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "serviceType" : {
              "type" : "string",
              "enum" : [ "Mlflow", "Sklearn" ]
            }
          }
        },
        "CreatePipeline" : {
          "required" : [ "name", "service" ],
          "type" : "object",
          "properties" : {
            "concurrency" : {
              "type" : "integer",
              "format" : "int32"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "pipelineLocation" : {
              "type" : "string"
            },
            "pipelineUrl" : {
              "type" : "string"
            },
            "service" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "startDate" : {
              "type" : "string",
              "format" : "date-time"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "tasks" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Task"
              }
            }
          }
        },
        "CreatePipelineService" : {
          "required" : [ "connection", "name", "serviceType" ],
          "type" : "object",
          "properties" : {
            "connection" : {
              "$ref" : "#/components/schemas/PipelineConnection"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "serviceType" : {
              "type" : "string",
              "enum" : [ "Airflow", "Glue", "Airbyte" ]
            }
          }
        },
        "CreatePolicy" : {
          "required" : [ "name", "policyType" ],
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "enabled" : {
              "type" : "boolean"
            },
            "extension" : {
              "type" : "object"
            },
            "location" : {
              "type" : "string",
              "format" : "uuid"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "policyType" : {
              "type" : "string",
              "enum" : [ "AccessControl", "Lifecycle" ]
            },
            "policyUrl" : {
              "type" : "string",
              "format" : "uri"
            },
            "rules" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          }
        },
        "CreatePost" : {
          "required" : [ "from", "message" ],
          "type" : "object",
          "properties" : {
            "from" : {
              "type" : "string"
            },
            "message" : {
              "type" : "string"
            }
          }
        },
        "CreateRole" : {
          "required" : [ "name", "policies" ],
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "policies" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            }
          }
        },
        "CreateStorageService" : {
          "required" : [ "name" ],
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "serviceType" : {
              "type" : "string",
              "enum" : [ "S3", "GCS", "HDFS", "ABFS" ]
            }
          }
        },
        "CreateTable" : {
          "required" : [ "columns", "databaseSchema", "name" ],
          "type" : "object",
          "properties" : {
            "columns" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Column"
              }
            },
            "databaseSchema" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "profileQuery" : {
              "type" : "string"
            },
            "profileSample" : {
              "type" : "number",
              "format" : "double"
            },
            "tableConstraints" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TableConstraint"
              }
            },
            "tablePartition" : {
              "$ref" : "#/components/schemas/TablePartition"
            },
            "tableType" : {
              "type" : "string",
              "enum" : [ "Regular", "External", "View", "SecureView", "MaterializedView", "Iceberg", "Local" ]
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "viewDefinition" : {
              "type" : "string"
            }
          }
        },
        "CreateTableTest" : {
          "required" : [ "testCase" ],
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "executionFrequency" : {
              "type" : "string",
              "enum" : [ "Hourly", "Daily", "Weekly" ]
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "result" : {
              "$ref" : "#/components/schemas/TestCaseResult"
            },
            "testCase" : {
              "$ref" : "#/components/schemas/TableTestCase"
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            }
          }
        },
        "CreateTag" : {
          "required" : [ "description", "name" ],
          "type" : "object",
          "properties" : {
            "associatedTags" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "name" : {
              "maxLength" : 25,
              "minLength" : 2,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          }
        },
        "CreateTagCategory" : {
          "required" : [ "categoryType", "description", "name" ],
          "type" : "object",
          "properties" : {
            "categoryType" : {
              "type" : "string",
              "enum" : [ "Descriptive", "Classification" ]
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "name" : {
              "maxLength" : 25,
              "minLength" : 2,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          }
        },
        "CreateTaskDetails" : {
          "required" : [ "assignees", "type" ],
          "type" : "object",
          "properties" : {
            "assignees" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "oldValue" : {
              "type" : "string"
            },
            "suggestion" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string",
              "enum" : [ "RequestDescription", "UpdateDescription", "RequestTag", "UpdateTag", "Generic" ]
            }
          }
        },
        "CreateTeam" : {
          "required" : [ "name" ],
          "type" : "object",
          "properties" : {
            "defaultRoles" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "uuid"
              }
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "isJoinable" : {
              "type" : "boolean"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "profile" : {
              "$ref" : "#/components/schemas/Profile"
            },
            "users" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "uuid"
              }
            }
          }
        },
        "CreateThread" : {
          "required" : [ "about", "from", "message" ],
          "type" : "object",
          "properties" : {
            "about" : {
              "pattern" : "^<#E::\\S+::\\S+>$",
              "type" : "string"
            },
            "addressedTo" : {
              "pattern" : "^<#E::\\S+::\\S+>$",
              "type" : "string"
            },
            "from" : {
              "type" : "string"
            },
            "message" : {
              "type" : "string"
            },
            "taskDetails" : {
              "$ref" : "#/components/schemas/CreateTaskDetails"
            },
            "type" : {
              "type" : "string",
              "enum" : [ "Conversation", "Task", "Announcement" ]
            }
          }
        },
        "CreateTopic" : {
          "required" : [ "name", "partitions", "service" ],
          "type" : "object",
          "properties" : {
            "cleanupPolicies" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "delete", "compact" ]
              }
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "maximumMessageSize" : {
              "type" : "integer",
              "format" : "int32"
            },
            "minimumInSyncReplicas" : {
              "type" : "integer",
              "format" : "int32"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "partitions" : {
              "type" : "integer",
              "format" : "int32"
            },
            "replicationFactor" : {
              "type" : "integer",
              "format" : "int32"
            },
            "retentionSize" : {
              "type" : "number",
              "format" : "double"
            },
            "retentionTime" : {
              "type" : "number",
              "format" : "double"
            },
            "schemaText" : {
              "type" : "string"
            },
            "schemaType" : {
              "type" : "string",
              "enum" : [ "Avro", "Protobuf", "JSON", "Other" ]
            },
            "service" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "topicConfig" : {
              "$ref" : "#/components/schemas/TopicConfig"
            }
          }
        },
        "CreateType" : {
          "required" : [ "description", "name", "nameSpace", "schema" ],
          "type" : "object",
          "properties" : {
            "category" : {
              "type" : "string",
              "enum" : [ "field", "entity" ]
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "name" : {
              "pattern" : "^[a-z][a-zA-Z0-9]+$",
              "type" : "string"
            },
            "nameSpace" : {
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "schema" : {
              "type" : "string"
            }
          }
        },
        "CreateUser" : {
          "required" : [ "email", "name" ],
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "email" : {
              "maxLength" : 127,
              "minLength" : 6,
              "pattern" : "^\\S+@\\S+\\.\\S+$",
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "isAdmin" : {
              "type" : "boolean"
            },
            "isBot" : {
              "type" : "boolean"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "profile" : {
              "$ref" : "#/components/schemas/Profile"
            },
            "roles" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "uuid"
              }
            },
            "teams" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "uuid"
              }
            },
            "timezone" : {
              "type" : "string"
            }
          }
        },
        "CreateWebhook" : {
          "required" : [ "endpoint", "eventFilters", "name" ],
          "type" : "object",
          "properties" : {
            "batchSize" : {
              "type" : "integer",
              "format" : "int32"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "enabled" : {
              "type" : "boolean"
            },
            "endpoint" : {
              "type" : "string",
              "format" : "uri"
            },
            "eventFilters" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventFilter"
              }
            },
            "extension" : {
              "type" : "object"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "secretKey" : {
              "type" : "string"
            },
            "timeout" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        },
        "CustomMetric" : {
          "required" : [ "columnName", "expression", "name" ],
          "type" : "object",
          "properties" : {
            "columnName" : {
              "type" : "string"
            },
            "description" : {
              "type" : "string"
            },
            "expression" : {
              "type" : "string"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            }
          }
        },
        "CustomMetricProfile" : {
          "type" : "object",
          "properties" : {
            "name" : {
              "type" : "string"
            },
            "value" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "CustomProperty" : {
          "required" : [ "description", "name", "propertyType" ],
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "name" : {
              "pattern" : "^[a-z][a-zA-Z0-9]+$",
              "type" : "string"
            },
            "propertyType" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          }
        },
        "DailyCount" : {
          "required" : [ "count", "date" ],
          "type" : "object",
          "properties" : {
            "count" : {
              "type" : "integer",
              "format" : "int32"
            },
            "date" : {
              "type" : "string"
            }
          }
        },
        "Dashboard" : {
          "required" : [ "id", "name", "service" ],
          "type" : "object",
          "properties" : {
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "charts" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "dashboardUrl" : {
              "type" : "string"
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "service" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "serviceType" : {
              "type" : "string",
              "enum" : [ "Superset", "Looker", "Tableau", "Redash", "Metabase", "PowerBI", "Mode" ]
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "usageSummary" : {
              "$ref" : "#/components/schemas/UsageDetails"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "DashboardConnection" : {
          "type" : "object",
          "properties" : {
            "config" : {
              "type" : "object"
            }
          }
        },
        "DashboardList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Dashboard"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "DashboardService" : {
          "required" : [ "connection", "id", "name", "serviceType" ],
          "type" : "object",
          "properties" : {
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "connection" : {
              "$ref" : "#/components/schemas/DashboardConnection"
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "pipelines" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "serviceType" : {
              "type" : "string",
              "enum" : [ "Superset", "Looker", "Tableau", "Redash", "Metabase", "PowerBI", "Mode" ]
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "DashboardServiceList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/DashboardService"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "DataModel" : {
          "required" : [ "modelType", "sql" ],
          "type" : "object",
          "properties" : {
            "columns" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Column"
              }
            },
            "description" : {
              "type" : "string"
            },
            "generatedAt" : {
              "type" : "string",
              "format" : "date-time"
            },
            "modelType" : {
              "type" : "string",
              "enum" : [ "DBT" ]
            },
            "path" : {
              "type" : "string"
            },
            "rawSql" : {
              "type" : "string"
            },
            "sql" : {
              "type" : "string"
            },
            "upstream" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        },
        "Database" : {
          "required" : [ "name", "service" ],
          "type" : "object",
          "properties" : {
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "databaseSchemas" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "default" : {
              "type" : "boolean"
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "location" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "service" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "serviceType" : {
              "type" : "string",
              "enum" : [ "BigQuery", "Mysql", "Redshift", "Snowflake", "Postgres", "Mssql", "Hive", "Oracle", "Athena", "Presto", "Trino", "Vertica", "Glue", "MariaDB", "Druid", "Db2", "Clickhouse", "Databricks", "DynamoDB", "AzureSQL", "SingleStore", "SQLite", "DeltaLake", "Salesforce", "SampleData", "PinotDB", "Datalake" ]
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "usageSummary" : {
              "$ref" : "#/components/schemas/UsageDetails"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "DatabaseConnection" : {
          "type" : "object",
          "properties" : {
            "config" : {
              "type" : "object"
            }
          }
        },
        "DatabaseList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Database"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "DatabaseSchema" : {
          "required" : [ "database", "name", "service" ],
          "type" : "object",
          "properties" : {
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "database" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "service" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "serviceType" : {
              "type" : "string",
              "enum" : [ "BigQuery", "Mysql", "Redshift", "Snowflake", "Postgres", "Mssql", "Hive", "Oracle", "Athena", "Presto", "Trino", "Vertica", "Glue", "MariaDB", "Druid", "Db2", "Clickhouse", "Databricks", "DynamoDB", "AzureSQL", "SingleStore", "SQLite", "DeltaLake", "Salesforce", "SampleData", "PinotDB", "Datalake" ]
            },
            "tables" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "usageSummary" : {
              "$ref" : "#/components/schemas/UsageDetails"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "DatabaseSchemaList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/DatabaseSchema"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "DatabaseService" : {
          "required" : [ "connection", "id", "name", "serviceType" ],
          "type" : "object",
          "properties" : {
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "connection" : {
              "$ref" : "#/components/schemas/DatabaseConnection"
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "pipelines" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "serviceType" : {
              "type" : "string",
              "enum" : [ "BigQuery", "Mysql", "Redshift", "Snowflake", "Postgres", "Mssql", "Hive", "Oracle", "Athena", "Presto", "Trino", "Vertica", "Glue", "MariaDB", "Druid", "Db2", "Clickhouse", "Databricks", "DynamoDB", "AzureSQL", "SingleStore", "SQLite", "DeltaLake", "Salesforce", "SampleData", "PinotDB", "Datalake" ]
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "DatabaseServiceList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/DatabaseService"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "DocumentField" : {
          "type" : "object",
          "properties" : {
            "fragment" : {
              "type" : "boolean"
            },
            "name" : {
              "type" : "string"
            },
            "value" : {
              "type" : "object"
            },
            "values" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          }
        },
        "Edge" : {
          "required" : [ "fromEntity", "toEntity" ],
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "fromEntity" : {
              "type" : "string",
              "format" : "uuid"
            },
            "lineageDetails" : {
              "$ref" : "#/components/schemas/LineageDetails"
            },
            "toEntity" : {
              "type" : "string",
              "format" : "uuid"
            }
          }
        },
        "EntitiesEdge" : {
          "required" : [ "fromEntity", "toEntity" ],
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "fromEntity" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "lineageDetails" : {
              "$ref" : "#/components/schemas/LineageDetails"
            },
            "toEntity" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          }
        },
        "EntityHistory" : {
          "required" : [ "entityType", "versions" ],
          "type" : "object",
          "properties" : {
            "entityType" : {
              "type" : "string"
            },
            "versions" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          }
        },
        "EntityLineage" : {
          "required" : [ "entity" ],
          "type" : "object",
          "properties" : {
            "downstreamEdges" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Edge"
              }
            },
            "entity" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "nodes" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "upstreamEdges" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Edge"
              }
            }
          }
        },
        "EntityLinkThreadCount" : {
          "required" : [ "count", "entityLink" ],
          "type" : "object",
          "properties" : {
            "count" : {
              "type" : "integer",
              "format" : "int32"
            },
            "entityLink" : {
              "pattern" : "^<#E::\\S+::\\S+>$",
              "type" : "string"
            }
          }
        },
        "EntityReference" : {
          "required" : [ "id", "type" ],
          "type" : "object",
          "properties" : {
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "fullyQualifiedName" : {
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "name" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "EntityUsage" : {
          "required" : [ "entity", "usage" ],
          "type" : "object",
          "properties" : {
            "entity" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "usage" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/UsageDetails"
              }
            }
          }
        },
        "EventFilter" : {
          "required" : [ "eventType" ],
          "type" : "object",
          "properties" : {
            "entities" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "eventType" : {
              "type" : "string",
              "enum" : [ "entityCreated", "entityUpdated", "entitySoftDeleted", "entityDeleted" ]
            }
          }
        },
        "Explanation" : {
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "details" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Explanation"
              }
            },
            "match" : {
              "type" : "boolean"
            },
            "value" : {
              "type" : "number"
            }
          }
        },
        "FailureDetails" : {
          "type" : "object",
          "properties" : {
            "lastFailedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "lastFailedReason" : {
              "type" : "string"
            },
            "lastFailedStatusCode" : {
              "type" : "integer",
              "format" : "int32"
            },
            "lastSuccessfulAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "nextAttempt" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        },
        "FieldChange" : {
          "type" : "object",
          "properties" : {
            "name" : {
              "type" : "string"
            },
            "newValue" : {
              "type" : "object"
            },
            "oldValue" : {
              "type" : "object"
            }
          }
        },
        "FieldComparatorSource" : {
          "type" : "object"
        },
        "GenerateTokenRequest" : {
          "required" : [ "JWTTokenExpiry" ],
          "type" : "object",
          "properties" : {
            "JWTTokenExpiry" : {
              "type" : "string",
              "enum" : [ "7", "30", "60", "90", "Unlimited" ]
            }
          }
        },
        "Glossary" : {
          "required" : [ "description", "id", "name" ],
          "type" : "object",
          "properties" : {
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "reviewers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "usageCount" : {
              "type" : "integer",
              "format" : "int32"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "GlossaryList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Glossary"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "GlossaryTerm" : {
          "required" : [ "description", "glossary", "id", "name" ],
          "type" : "object",
          "properties" : {
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "children" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "glossary" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "parent" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "references" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TermReference"
              }
            },
            "relatedTerms" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "reviewers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "status" : {
              "type" : "string",
              "enum" : [ "Draft", "Approved", "Deprecated" ]
            },
            "synonyms" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "usageCount" : {
              "type" : "integer",
              "format" : "int32"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "GlossaryTermList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/GlossaryTerm"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "HighlightField" : {
          "type" : "object",
          "properties" : {
            "fragment" : {
              "type" : "boolean"
            },
            "fragments" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Text"
              }
            },
            "name" : {
              "type" : "string"
            }
          }
        },
        "Histogram" : {
          "type" : "object",
          "properties" : {
            "boundaries" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            },
            "frequencies" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            }
          }
        },
        "ImageList" : {
          "type" : "object",
          "properties" : {
            "image" : {
              "type" : "string",
              "format" : "uri"
            },
            "image192" : {
              "type" : "string",
              "format" : "uri"
            },
            "image24" : {
              "type" : "string",
              "format" : "uri"
            },
            "image32" : {
              "type" : "string",
              "format" : "uri"
            },
            "image48" : {
              "type" : "string",
              "format" : "uri"
            },
            "image512" : {
              "type" : "string",
              "format" : "uri"
            },
            "image72" : {
              "type" : "string",
              "format" : "uri"
            }
          }
        },
        "Index" : {
          "type" : "object",
          "properties" : {
            "fragment" : {
              "type" : "boolean"
            },
            "name" : {
              "type" : "string"
            },
            "uuid" : {
              "type" : "string"
            }
          }
        },
        "IndexSorter" : {
          "type" : "object",
          "properties" : {
            "providerName" : {
              "type" : "string"
            }
          }
        },
        "IngestionPipeline" : {
          "required" : [ "airflowConfig", "name", "openMetadataServerConnection", "pipelineType", "sourceConfig" ],
          "type" : "object",
          "properties" : {
            "airflowConfig" : {
              "$ref" : "#/components/schemas/AirflowConfig"
            },
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "deleted" : {
              "type" : "boolean"
            },
            "deployed" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "enabled" : {
              "type" : "boolean"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "loggerLevel" : {
              "type" : "string",
              "enum" : [ "DEBUG", "INFO", "WARN", "ERROR" ]
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "openMetadataServerConnection" : {
              "$ref" : "#/components/schemas/OpenMetadataServerConnection"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "pipelineStatuses" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/PipelineStatus"
              }
            },
            "pipelineType" : {
              "type" : "string",
              "enum" : [ "metadata", "usage", "profiler" ]
            },
            "service" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "sourceConfig" : {
              "$ref" : "#/components/schemas/SourceConfig"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "JWKSKey" : {
          "required" : [ "alg", "e", "kid", "kty", "n", "use" ],
          "type" : "object",
          "properties" : {
            "alg" : {
              "type" : "string"
            },
            "e" : {
              "type" : "string"
            },
            "kid" : {
              "type" : "string"
            },
            "kty" : {
              "type" : "string"
            },
            "n" : {
              "type" : "string"
            },
            "use" : {
              "type" : "string"
            }
          }
        },
        "JWKSResponse" : {
          "required" : [ "keys" ],
          "type" : "object",
          "properties" : {
            "keys" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/JWKSKey"
              }
            }
          }
        },
        "JWTAuthMechanism" : {
          "required" : [ "JWTToken", "JWTTokenExpiry" ],
          "type" : "object",
          "properties" : {
            "JWTToken" : {
              "type" : "string"
            },
            "JWTTokenExpiresAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "JWTTokenExpiry" : {
              "type" : "string",
              "enum" : [ "7", "30", "60", "90", "Unlimited" ]
            }
          }
        },
        "JoinedWith" : {
          "required" : [ "fullyQualifiedName", "joinCount" ],
          "type" : "object",
          "properties" : {
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "joinCount" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        },
        "LineageDetails" : {
          "required" : [ "columnsLineage", "sqlQuery" ],
          "type" : "object",
          "properties" : {
            "columnsLineage" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ColumnLineage"
              }
            },
            "pipeline" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "sqlQuery" : {
              "type" : "string"
            }
          }
        },
        "Location" : {
          "required" : [ "name", "service" ],
          "type" : "object",
          "properties" : {
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "locationType" : {
              "type" : "string",
              "enum" : [ "Bucket", "Prefix", "Database", "Table", "Iceberg" ]
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "path" : {
              "type" : "string"
            },
            "service" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "serviceType" : {
              "type" : "string",
              "enum" : [ "S3", "GCS", "HDFS", "ABFS" ]
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "LocationList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Location"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "MessagingConnection" : {
          "type" : "object",
          "properties" : {
            "config" : {
              "type" : "object"
            }
          }
        },
        "MessagingService" : {
          "required" : [ "connection", "id", "name", "serviceType" ],
          "type" : "object",
          "properties" : {
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "connection" : {
              "$ref" : "#/components/schemas/MessagingConnection"
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "pipelines" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "serviceType" : {
              "type" : "string",
              "enum" : [ "Kafka", "Pulsar" ]
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "MessagingServiceList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/MessagingService"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "Metrics" : {
          "required" : [ "id", "name", "service" ],
          "type" : "object",
          "properties" : {
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "service" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "usageSummary" : {
              "$ref" : "#/components/schemas/UsageDetails"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "MetricsList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Metrics"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "MlFeature" : {
          "type" : "object",
          "properties" : {
            "dataType" : {
              "type" : "string",
              "enum" : [ "numerical", "categorical" ]
            },
            "description" : {
              "type" : "string"
            },
            "featureAlgorithm" : {
              "type" : "string"
            },
            "featureSources" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/MlFeatureSource"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            }
          }
        },
        "MlFeatureSource" : {
          "type" : "object",
          "properties" : {
            "dataSource" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "dataType" : {
              "type" : "string",
              "enum" : [ "integer", "number", "string", "array", "date", "timestamp", "object", "boolean" ]
            },
            "description" : {
              "type" : "string"
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            }
          }
        },
        "MlHyperParameter" : {
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "name" : {
              "type" : "string"
            },
            "value" : {
              "type" : "string"
            }
          }
        },
        "MlModel" : {
          "required" : [ "algorithm", "id", "name", "service" ],
          "type" : "object",
          "properties" : {
            "algorithm" : {
              "type" : "string"
            },
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "dashboard" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "mlFeatures" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/MlFeature"
              }
            },
            "mlHyperParameters" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/MlHyperParameter"
              }
            },
            "mlStore" : {
              "$ref" : "#/components/schemas/MlStore"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "server" : {
              "type" : "string",
              "format" : "uri"
            },
            "service" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "serviceType" : {
              "type" : "string",
              "enum" : [ "Mlflow", "Sklearn" ]
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "target" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "usageSummary" : {
              "$ref" : "#/components/schemas/UsageDetails"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "MlModelConnection" : {
          "type" : "object",
          "properties" : {
            "config" : {
              "type" : "object"
            }
          }
        },
        "MlModelList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/MlModel"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "MlModelService" : {
          "required" : [ "connection", "id", "name", "serviceType" ],
          "type" : "object",
          "properties" : {
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "connection" : {
              "$ref" : "#/components/schemas/MlModelConnection"
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "pipelines" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "serviceType" : {
              "type" : "string",
              "enum" : [ "Mlflow", "Sklearn" ]
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "MlModelServiceList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/MlModelService"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "MlStore" : {
          "type" : "object",
          "properties" : {
            "imageRepository" : {
              "type" : "string",
              "format" : "uri"
            },
            "storage" : {
              "type" : "string",
              "format" : "uri"
            }
          }
        },
        "NestedIdentity" : {
          "type" : "object",
          "properties" : {
            "child" : {
              "$ref" : "#/components/schemas/NestedIdentity"
            },
            "field" : {
              "$ref" : "#/components/schemas/Text"
            },
            "fragment" : {
              "type" : "boolean"
            },
            "offset" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        },
        "OpenMetadataServerConnection" : {
          "required" : [ "hostPort" ],
          "type" : "object",
          "properties" : {
            "apiVersion" : {
              "type" : "string"
            },
            "authProvider" : {
              "type" : "string",
              "enum" : [ "no-auth", "azure", "google", "okta", "auth0", "custom-oidc", "openmetadata" ]
            },
            "enableVersionValidation" : {
              "type" : "boolean"
            },
            "hostPort" : {
              "type" : "string"
            },
            "includeDashboards" : {
              "type" : "boolean"
            },
            "includeDatabaseServices" : {
              "type" : "boolean"
            },
            "includeGlossaryTerms" : {
              "type" : "boolean"
            },
            "includeMessagingServices" : {
              "type" : "boolean"
            },
            "includeMlModels" : {
              "type" : "boolean"
            },
            "includePipelineServices" : {
              "type" : "boolean"
            },
            "includePipelines" : {
              "type" : "boolean"
            },
            "includePolicy" : {
              "type" : "boolean"
            },
            "includeTables" : {
              "type" : "boolean"
            },
            "includeTags" : {
              "type" : "boolean"
            },
            "includeTeams" : {
              "type" : "boolean"
            },
            "includeTopics" : {
              "type" : "boolean"
            },
            "includeUsers" : {
              "type" : "boolean"
            },
            "limitRecords" : {
              "type" : "integer",
              "format" : "int32"
            },
            "securityConfig" : {
              "type" : "object"
            },
            "supportsMetadataExtraction" : {
              "type" : "boolean"
            },
            "type" : {
              "type" : "string",
              "enum" : [ "OpenMetadata" ]
            }
          }
        },
        "OriginalIndices" : {
          "type" : "object"
        },
        "Paging" : {
          "required" : [ "total" ],
          "type" : "object",
          "properties" : {
            "after" : {
              "type" : "string"
            },
            "before" : {
              "type" : "string"
            },
            "total" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        },
        "Permissions" : {
          "type" : "object",
          "properties" : {
            "metadataOperations" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "boolean"
              }
            }
          }
        },
        "Pipeline" : {
          "required" : [ "id", "name", "service" ],
          "type" : "object",
          "properties" : {
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "concurrency" : {
              "type" : "integer",
              "format" : "int32"
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "pipelineLocation" : {
              "type" : "string"
            },
            "pipelineStatus" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/PipelineStatus"
              }
            },
            "pipelineUrl" : {
              "type" : "string"
            },
            "service" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "serviceType" : {
              "type" : "string",
              "enum" : [ "Airflow", "Glue", "Airbyte" ]
            },
            "startDate" : {
              "type" : "string",
              "format" : "date-time"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "tasks" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Task"
              }
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "PipelineConnection" : {
          "type" : "object",
          "properties" : {
            "config" : {
              "type" : "object"
            }
          }
        },
        "PipelineList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Pipeline"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "PipelineService" : {
          "required" : [ "connection", "id", "name", "serviceType" ],
          "type" : "object",
          "properties" : {
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "connection" : {
              "$ref" : "#/components/schemas/PipelineConnection"
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "pipelines" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "serviceType" : {
              "type" : "string",
              "enum" : [ "Airflow", "Glue", "Airbyte" ]
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "PipelineServiceList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/PipelineService"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "PipelineStatus" : {
          "type" : "object",
          "properties" : {
            "endDate" : {
              "type" : "string"
            },
            "runId" : {
              "type" : "string"
            },
            "startDate" : {
              "type" : "string"
            },
            "state" : {
              "type" : "string"
            }
          }
        },
        "Policy" : {
          "required" : [ "id", "name", "policyType" ],
          "type" : "object",
          "properties" : {
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "enabled" : {
              "type" : "boolean"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "location" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "policyType" : {
              "type" : "string",
              "enum" : [ "AccessControl", "Lifecycle" ]
            },
            "policyUrl" : {
              "type" : "string",
              "format" : "uri"
            },
            "rules" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "PolicyList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Policy"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "Post" : {
          "required" : [ "from", "id", "message" ],
          "type" : "object",
          "properties" : {
            "from" : {
              "type" : "string"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "message" : {
              "type" : "string"
            },
            "postTs" : {
              "type" : "integer",
              "format" : "int64"
            },
            "reactions" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Reaction"
              }
            }
          }
        },
        "PostList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Post"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "Profile" : {
          "type" : "object",
          "properties" : {
            "images" : {
              "$ref" : "#/components/schemas/ImageList"
            }
          }
        },
        "ProfileResult" : {
          "type" : "object",
          "properties" : {
            "debugInfo" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            },
            "fragment" : {
              "type" : "boolean"
            },
            "luceneDescription" : {
              "type" : "string"
            },
            "queryName" : {
              "type" : "string"
            },
            "time" : {
              "type" : "integer",
              "format" : "int64"
            },
            "timeBreakdown" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          }
        },
        "ProfileShardResult" : {
          "type" : "object",
          "properties" : {
            "aggregationProfileResults" : {
              "$ref" : "#/components/schemas/AggregationProfileShardResult"
            },
            "queryProfileResults" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/QueryProfileShardResult"
              }
            }
          }
        },
        "QueryProfileShardResult" : {
          "type" : "object",
          "properties" : {
            "collectorResult" : {
              "$ref" : "#/components/schemas/CollectorResult"
            },
            "fragment" : {
              "type" : "boolean"
            },
            "queryResults" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ProfileResult"
              }
            },
            "rewriteTime" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        },
        "Reaction" : {
          "required" : [ "reactionType", "user" ],
          "type" : "object",
          "properties" : {
            "reactionType" : {
              "type" : "string",
              "enum" : [ "thumbsUp", "thumbsDown", "hooray", "laugh", "confused", "heart", "rocket", "eyes" ]
            },
            "user" : {
              "$ref" : "#/components/schemas/EntityReference"
            }
          }
        },
        "Report" : {
          "required" : [ "id", "name", "service" ],
          "type" : "object",
          "properties" : {
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "service" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "usageSummary" : {
              "$ref" : "#/components/schemas/UsageDetails"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "ReportList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Report"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResolveTask" : {
          "required" : [ "newValue" ],
          "type" : "object",
          "properties" : {
            "newValue" : {
              "type" : "string"
            }
          }
        },
        "ResultListBot" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Bot"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListChangeEvent" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ChangeEvent"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListChart" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Chart"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListDashboard" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Dashboard"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListDashboardService" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/DashboardService"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListDatabase" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Database"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListDatabaseSchema" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/DatabaseSchema"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListDatabaseService" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/DatabaseService"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListGlossary" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Glossary"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListGlossaryTerm" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/GlossaryTerm"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListIngestionPipeline" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/IngestionPipeline"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListLocation" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Location"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListMessagingService" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/MessagingService"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListMetrics" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Metrics"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListMlModel" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/MlModel"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListMlModelService" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/MlModelService"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListPipeline" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Pipeline"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListPipelineService" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/PipelineService"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListPolicy" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Policy"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListReport" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Report"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListRole" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Role"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListStorageService" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/StorageService"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListTable" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Table"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListTagCategory" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagCategory"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListTeam" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Team"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListThread" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Thread"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListTopic" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Topic"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListType" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Type"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListUser" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/User"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "ResultListWebhook" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Webhook"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "Role" : {
          "required" : [ "id", "name" ],
          "type" : "object",
          "properties" : {
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "defaultRole" : {
              "type" : "boolean"
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "policies" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "teams" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "users" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "RoleList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Role"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "SQLQuery" : {
          "type" : "object",
          "properties" : {
            "checksum" : {
              "type" : "string"
            },
            "duration" : {
              "type" : "number",
              "format" : "double"
            },
            "query" : {
              "type" : "string"
            },
            "queryDate" : {
              "type" : "string"
            },
            "user" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "vote" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "SandboxConfiguration" : {
          "type" : "object",
          "properties" : {
            "sandboxModeEnabled" : {
              "type" : "boolean"
            }
          }
        },
        "SearchHit" : {
          "type" : "object",
          "properties" : {
            "clusterAlias" : {
              "type" : "string"
            },
            "explanation" : {
              "$ref" : "#/components/schemas/Explanation"
            },
            "fields" : {
              "type" : "object",
              "additionalProperties" : {
                "$ref" : "#/components/schemas/DocumentField"
              }
            },
            "fragment" : {
              "type" : "boolean"
            },
            "highlightFields" : {
              "type" : "object",
              "additionalProperties" : {
                "$ref" : "#/components/schemas/HighlightField"
              }
            },
            "id" : {
              "type" : "string"
            },
            "index" : {
              "type" : "string"
            },
            "innerHits" : {
              "type" : "object",
              "additionalProperties" : {
                "$ref" : "#/components/schemas/SearchHits"
              }
            },
            "matchedQueries" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "nestedIdentity" : {
              "$ref" : "#/components/schemas/NestedIdentity"
            },
            "primaryTerm" : {
              "type" : "integer",
              "format" : "int64"
            },
            "rawSortValues" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            },
            "score" : {
              "type" : "number",
              "format" : "float"
            },
            "seqNo" : {
              "type" : "integer",
              "format" : "int64"
            },
            "shard" : {
              "$ref" : "#/components/schemas/SearchShardTarget"
            },
            "sortValues" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            },
            "sourceAsMap" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            },
            "sourceAsString" : {
              "type" : "string"
            },
            "sourceRef" : {
              "$ref" : "#/components/schemas/BytesReference"
            },
            "type" : {
              "type" : "string"
            },
            "version" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        },
        "SearchHits" : {
          "type" : "object",
          "properties" : {
            "collapseField" : {
              "type" : "string"
            },
            "collapseValues" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            },
            "fragment" : {
              "type" : "boolean"
            },
            "hits" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/SearchHit"
              }
            },
            "maxScore" : {
              "type" : "number",
              "format" : "float"
            },
            "sortFields" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/SortField"
              }
            },
            "totalHits" : {
              "$ref" : "#/components/schemas/TotalHits"
            }
          }
        },
        "SearchResponse" : {
          "type" : "object",
          "properties" : {
            "aggregations" : {
              "$ref" : "#/components/schemas/Aggregations"
            },
            "clusters" : {
              "$ref" : "#/components/schemas/Clusters"
            },
            "failedShards" : {
              "type" : "integer",
              "format" : "int32"
            },
            "fragment" : {
              "type" : "boolean"
            },
            "hits" : {
              "$ref" : "#/components/schemas/SearchHits"
            },
            "internalResponse" : {
              "$ref" : "#/components/schemas/SearchResponseSections"
            },
            "numReducePhases" : {
              "type" : "integer",
              "format" : "int32"
            },
            "profileResults" : {
              "type" : "object",
              "additionalProperties" : {
                "$ref" : "#/components/schemas/ProfileShardResult"
              }
            },
            "scrollId" : {
              "type" : "string"
            },
            "shardFailures" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ShardSearchFailure"
              }
            },
            "skippedShards" : {
              "type" : "integer",
              "format" : "int32"
            },
            "successfulShards" : {
              "type" : "integer",
              "format" : "int32"
            },
            "suggest" : {
              "$ref" : "#/components/schemas/Suggest"
            },
            "terminatedEarly" : {
              "type" : "boolean"
            },
            "timedOut" : {
              "type" : "boolean"
            },
            "took" : {
              "$ref" : "#/components/schemas/TimeValue"
            },
            "totalShards" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        },
        "SearchResponseSections" : {
          "type" : "object",
          "properties" : {
            "fragment" : {
              "type" : "boolean"
            },
            "numReducePhases" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        },
        "SearchShardTarget" : {
          "type" : "object",
          "properties" : {
            "clusterAlias" : {
              "type" : "string"
            },
            "fullyQualifiedIndexName" : {
              "type" : "string"
            },
            "index" : {
              "type" : "string"
            },
            "nodeId" : {
              "type" : "string"
            },
            "nodeIdText" : {
              "$ref" : "#/components/schemas/Text"
            },
            "originalIndices" : {
              "$ref" : "#/components/schemas/OriginalIndices"
            },
            "shardId" : {
              "$ref" : "#/components/schemas/ShardId"
            }
          }
        },
        "ShardId" : {
          "type" : "object",
          "properties" : {
            "fragment" : {
              "type" : "boolean"
            },
            "id" : {
              "type" : "integer",
              "format" : "int32"
            },
            "index" : {
              "$ref" : "#/components/schemas/Index"
            },
            "indexName" : {
              "type" : "string"
            }
          }
        },
        "ShardSearchFailure" : {
          "type" : "object",
          "properties" : {
            "cause" : {
              "type" : "object",
              "properties" : {
                "localizedMessage" : {
                  "type" : "string"
                },
                "message" : {
                  "type" : "string"
                },
                "stackTrace" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "classLoaderName" : {
                        "type" : "string"
                      },
                      "moduleName" : {
                        "type" : "string"
                      },
                      "moduleVersion" : {
                        "type" : "string"
                      },
                      "methodName" : {
                        "type" : "string"
                      },
                      "fileName" : {
                        "type" : "string"
                      },
                      "lineNumber" : {
                        "type" : "integer",
                        "format" : "int32"
                      },
                      "nativeMethod" : {
                        "type" : "boolean"
                      },
                      "className" : {
                        "type" : "string"
                      }
                    }
                  }
                },
                "suppressed" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "stackTrace" : {
                        "type" : "array",
                        "items" : {
                          "type" : "object",
                          "properties" : {
                            "classLoaderName" : {
                              "type" : "string"
                            },
                            "moduleName" : {
                              "type" : "string"
                            },
                            "moduleVersion" : {
                              "type" : "string"
                            },
                            "methodName" : {
                              "type" : "string"
                            },
                            "fileName" : {
                              "type" : "string"
                            },
                            "lineNumber" : {
                              "type" : "integer",
                              "format" : "int32"
                            },
                            "nativeMethod" : {
                              "type" : "boolean"
                            },
                            "className" : {
                              "type" : "string"
                            }
                          }
                        }
                      },
                      "message" : {
                        "type" : "string"
                      },
                      "localizedMessage" : {
                        "type" : "string"
                      }
                    }
                  }
                }
              }
            },
            "fragment" : {
              "type" : "boolean"
            }
          }
        },
        "SortField" : {
          "type" : "object",
          "properties" : {
            "bytesComparator" : {
              "type" : "object"
            },
            "canUsePoints" : {
              "type" : "boolean"
            },
            "comparatorSource" : {
              "$ref" : "#/components/schemas/FieldComparatorSource"
            },
            "field" : {
              "type" : "string"
            },
            "indexSorter" : {
              "$ref" : "#/components/schemas/IndexSorter"
            },
            "missingValue" : {
              "type" : "object"
            },
            "reverse" : {
              "type" : "boolean"
            },
            "type" : {
              "type" : "string",
              "enum" : [ "SCORE", "DOC", "STRING", "INT", "FLOAT", "LONG", "DOUBLE", "CUSTOM", "STRING_VAL", "REWRITEABLE" ]
            }
          }
        },
        "SourceConfig" : {
          "type" : "object",
          "properties" : {
            "config" : {
              "type" : "object"
            }
          }
        },
        "Status" : {
          "type" : "object",
          "properties" : {
            "executionStatus" : {
              "type" : "string",
              "enum" : [ "Successful", "Failed", "Pending" ]
            },
            "name" : {
              "type" : "string"
            }
          }
        },
        "StorageService" : {
          "required" : [ "href", "id", "name", "serviceType" ],
          "type" : "object",
          "properties" : {
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "serviceType" : {
              "type" : "string",
              "enum" : [ "S3", "GCS", "HDFS", "ABFS" ]
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "StorageServiceList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/StorageService"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "Suggest" : {
          "type" : "object",
          "properties" : {
            "fragment" : {
              "type" : "boolean"
            }
          }
        },
        "Table" : {
          "required" : [ "columns", "id", "name" ],
          "type" : "object",
          "properties" : {
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "columns" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Column"
              }
            },
            "dataModel" : {
              "$ref" : "#/components/schemas/DataModel"
            },
            "database" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "databaseSchema" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "joins" : {
              "$ref" : "#/components/schemas/TableJoins"
            },
            "location" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "profileQuery" : {
              "type" : "string"
            },
            "profileSample" : {
              "type" : "number",
              "format" : "double"
            },
            "sampleData" : {
              "$ref" : "#/components/schemas/TableData"
            },
            "service" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "serviceType" : {
              "type" : "string",
              "enum" : [ "BigQuery", "Mysql", "Redshift", "Snowflake", "Postgres", "Mssql", "Hive", "Oracle", "Athena", "Presto", "Trino", "Vertica", "Glue", "MariaDB", "Druid", "Db2", "Clickhouse", "Databricks", "DynamoDB", "AzureSQL", "SingleStore", "SQLite", "DeltaLake", "Salesforce", "SampleData", "PinotDB", "Datalake" ]
            },
            "tableConstraints" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TableConstraint"
              }
            },
            "tablePartition" : {
              "$ref" : "#/components/schemas/TablePartition"
            },
            "tableProfile" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TableProfile"
              }
            },
            "tableQueries" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/SQLQuery"
              }
            },
            "tableTests" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TableTest"
              }
            },
            "tableType" : {
              "type" : "string",
              "enum" : [ "Regular", "External", "View", "SecureView", "MaterializedView", "Iceberg", "Local" ]
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "usageSummary" : {
              "$ref" : "#/components/schemas/UsageDetails"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            },
            "viewDefinition" : {
              "type" : "string"
            }
          }
        },
        "TableConstraint" : {
          "type" : "object",
          "properties" : {
            "columns" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "constraintType" : {
              "type" : "string",
              "enum" : [ "UNIQUE", "PRIMARY_KEY", "FOREIGN_KEY" ]
            }
          }
        },
        "TableData" : {
          "type" : "object",
          "properties" : {
            "columns" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "rows" : {
              "type" : "array",
              "items" : {
                "type" : "array",
                "items" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "TableJoins" : {
          "type" : "object",
          "properties" : {
            "columnJoins" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ColumnJoin"
              }
            },
            "dayCount" : {
              "type" : "integer",
              "format" : "int32"
            },
            "directTableJoins" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/JoinedWith"
              }
            },
            "startDate" : {
              "type" : "string"
            }
          }
        },
        "TableList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Table"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "TablePartition" : {
          "required" : [ "columns", "interval", "intervalType" ],
          "type" : "object",
          "properties" : {
            "columns" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "interval" : {
              "type" : "string"
            },
            "intervalType" : {
              "type" : "string",
              "enum" : [ "TIME-UNIT", "INTEGER-RANGE", "INGESTION-TIME", "COLUMN-VALUE" ]
            }
          }
        },
        "TableProfile" : {
          "type" : "object",
          "properties" : {
            "columnCount" : {
              "type" : "number",
              "format" : "double"
            },
            "columnNames" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            },
            "columnProfile" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ColumnProfile"
              }
            },
            "profileDate" : {
              "type" : "string"
            },
            "profileQuery" : {
              "type" : "string"
            },
            "profileSample" : {
              "type" : "number",
              "format" : "double"
            },
            "rowCount" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "TableTest" : {
          "required" : [ "name", "testCase" ],
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "executionFrequency" : {
              "type" : "string",
              "enum" : [ "Hourly", "Daily", "Weekly" ]
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "results" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TestCaseResult"
              }
            },
            "testCase" : {
              "$ref" : "#/components/schemas/TableTestCase"
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            }
          }
        },
        "TableTestCase" : {
          "type" : "object",
          "properties" : {
            "config" : {
              "type" : "object"
            },
            "tableTestType" : {
              "type" : "string",
              "enum" : [ "tableRowCountToEqual", "tableRowCountToBeBetween", "tableColumnCountToEqual", "tableColumnCountToBeBetween", "tableColumnToMatchSet", "tableColumnNameToExist" ]
            }
          }
        },
        "Tag" : {
          "required" : [ "description", "name" ],
          "type" : "object",
          "properties" : {
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "children" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Tag"
              }
            },
            "deleted" : {
              "type" : "boolean"
            },
            "deprecated" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "name" : {
              "maxLength" : 25,
              "minLength" : 2,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "usageCount" : {
              "type" : "integer",
              "format" : "int32"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "TagCategory" : {
          "required" : [ "categoryType", "description", "name" ],
          "type" : "object",
          "properties" : {
            "categoryType" : {
              "type" : "string",
              "enum" : [ "Descriptive", "Classification" ]
            },
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "children" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Tag"
              }
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "name" : {
              "maxLength" : 25,
              "minLength" : 2,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "usageCount" : {
              "type" : "integer",
              "format" : "int32"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "TagLabel" : {
          "required" : [ "labelType", "source", "state", "tagFQN" ],
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "labelType" : {
              "type" : "string",
              "enum" : [ "Manual", "Propagated", "Automated", "Derived" ]
            },
            "source" : {
              "type" : "string",
              "enum" : [ "Tag", "Glossary" ]
            },
            "state" : {
              "type" : "string",
              "enum" : [ "Suggested", "Confirmed" ]
            },
            "tagFQN" : {
              "maxLength" : 45,
              "minLength" : 0,
              "type" : "string"
            }
          }
        },
        "Task" : {
          "required" : [ "name" ],
          "type" : "object",
          "properties" : {
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "downstreamTasks" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "endDate" : {
              "type" : "string"
            },
            "fullyQualifiedName" : {
              "type" : "string"
            },
            "name" : {
              "type" : "string"
            },
            "startDate" : {
              "type" : "string"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "taskSQL" : {
              "type" : "string"
            },
            "taskType" : {
              "type" : "string"
            },
            "taskUrl" : {
              "type" : "string"
            }
          }
        },
        "TaskDetails" : {
          "required" : [ "assignees", "id", "type" ],
          "type" : "object",
          "properties" : {
            "assignees" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "closedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "closedBy" : {
              "type" : "string"
            },
            "id" : {
              "type" : "integer",
              "format" : "int32"
            },
            "newValue" : {
              "type" : "string"
            },
            "oldValue" : {
              "type" : "string"
            },
            "status" : {
              "type" : "string",
              "enum" : [ "Open", "Closed" ]
            },
            "suggestion" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string",
              "enum" : [ "RequestDescription", "UpdateDescription", "RequestTag", "UpdateTag", "Generic" ]
            }
          }
        },
        "Team" : {
          "required" : [ "href", "id", "name" ],
          "type" : "object",
          "properties" : {
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "defaultRoles" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "isJoinable" : {
              "type" : "boolean"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "owns" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "profile" : {
              "$ref" : "#/components/schemas/Profile"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "users" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "TeamList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Team"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "TermReference" : {
          "type" : "object",
          "properties" : {
            "endpoint" : {
              "type" : "string",
              "format" : "uri"
            },
            "name" : {
              "type" : "string"
            }
          }
        },
        "TestCaseResult" : {
          "type" : "object",
          "properties" : {
            "executionTime" : {
              "type" : "integer",
              "format" : "int64"
            },
            "result" : {
              "type" : "string"
            },
            "sampleData" : {
              "type" : "string"
            },
            "testCaseStatus" : {
              "type" : "string",
              "enum" : [ "Success", "Failed", "Aborted" ]
            }
          }
        },
        "TestServiceConnection" : {
          "type" : "object",
          "properties" : {
            "connection" : {
              "type" : "object"
            },
            "connectionType" : {
              "type" : "string",
              "enum" : [ "Database", "Dashboard", "Messaging", "Pipeline", "MlModel" ]
            }
          }
        },
        "Text" : {
          "type" : "object",
          "properties" : {
            "fragment" : {
              "type" : "boolean"
            }
          }
        },
        "Thread" : {
          "required" : [ "about", "id", "message" ],
          "type" : "object",
          "properties" : {
            "about" : {
              "pattern" : "^<#E::\\S+::\\S+>$",
              "type" : "string"
            },
            "addressedTo" : {
              "pattern" : "^<#E::\\S+::\\S+>$",
              "type" : "string"
            },
            "createdBy" : {
              "type" : "string"
            },
            "entityId" : {
              "type" : "string",
              "format" : "uuid"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "message" : {
              "type" : "string"
            },
            "posts" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Post"
              }
            },
            "postsCount" : {
              "type" : "integer",
              "format" : "int32"
            },
            "reactions" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Reaction"
              }
            },
            "resolved" : {
              "type" : "boolean"
            },
            "task" : {
              "$ref" : "#/components/schemas/TaskDetails"
            },
            "threadTs" : {
              "type" : "integer",
              "format" : "int64"
            },
            "type" : {
              "type" : "string",
              "enum" : [ "Conversation", "Task", "Announcement" ]
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            }
          }
        },
        "ThreadCount" : {
          "required" : [ "counts", "totalCount" ],
          "type" : "object",
          "properties" : {
            "counts" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityLinkThreadCount"
              }
            },
            "totalCount" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        },
        "ThreadList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Thread"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "TimeValue" : {
          "type" : "object",
          "properties" : {
            "days" : {
              "type" : "integer",
              "format" : "int64"
            },
            "daysFrac" : {
              "type" : "number",
              "format" : "double"
            },
            "hours" : {
              "type" : "integer",
              "format" : "int64"
            },
            "hoursFrac" : {
              "type" : "number",
              "format" : "double"
            },
            "micros" : {
              "type" : "integer",
              "format" : "int64"
            },
            "microsFrac" : {
              "type" : "number",
              "format" : "double"
            },
            "millis" : {
              "type" : "integer",
              "format" : "int64"
            },
            "millisFrac" : {
              "type" : "number",
              "format" : "double"
            },
            "minutes" : {
              "type" : "integer",
              "format" : "int64"
            },
            "minutesFrac" : {
              "type" : "number",
              "format" : "double"
            },
            "nanos" : {
              "type" : "integer",
              "format" : "int64"
            },
            "seconds" : {
              "type" : "integer",
              "format" : "int64"
            },
            "secondsFrac" : {
              "type" : "number",
              "format" : "double"
            },
            "stringRep" : {
              "type" : "string"
            }
          }
        },
        "Topic" : {
          "required" : [ "id", "name", "partitions", "service" ],
          "type" : "object",
          "properties" : {
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "cleanupPolicies" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "delete", "compact" ]
              }
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "maximumMessageSize" : {
              "type" : "integer",
              "format" : "int32"
            },
            "minimumInSyncReplicas" : {
              "type" : "integer",
              "format" : "int32"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "partitions" : {
              "type" : "integer",
              "format" : "int32"
            },
            "replicationFactor" : {
              "type" : "integer",
              "format" : "int32"
            },
            "retentionSize" : {
              "type" : "number",
              "format" : "double"
            },
            "retentionTime" : {
              "type" : "number",
              "format" : "double"
            },
            "sampleData" : {
              "$ref" : "#/components/schemas/TopicSampleData"
            },
            "schemaText" : {
              "type" : "string"
            },
            "schemaType" : {
              "type" : "string",
              "enum" : [ "Avro", "Protobuf", "JSON", "Other" ]
            },
            "service" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "serviceType" : {
              "type" : "string",
              "enum" : [ "Kafka", "Pulsar" ]
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "topicConfig" : {
              "$ref" : "#/components/schemas/TopicConfig"
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "TopicConfig" : {
          "type" : "object"
        },
        "TopicList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Topic"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "TopicSampleData" : {
          "type" : "object",
          "properties" : {
            "messages" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        },
        "TotalHits" : {
          "type" : "object",
          "properties" : {
            "relation" : {
              "type" : "string",
              "enum" : [ "EQUAL_TO", "GREATER_THAN_OR_EQUAL_TO" ]
            },
            "value" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        },
        "Type" : {
          "required" : [ "description", "name" ],
          "type" : "object",
          "properties" : {
            "category" : {
              "type" : "string",
              "enum" : [ "field", "entity" ]
            },
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "customProperties" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CustomProperty"
              }
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "name" : {
              "pattern" : "^[a-z][a-zA-Z0-9]+$",
              "type" : "string"
            },
            "nameSpace" : {
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "schema" : {
              "type" : "string"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "TypeList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Type"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "UsageDetails" : {
          "required" : [ "dailyStats", "date" ],
          "type" : "object",
          "properties" : {
            "dailyStats" : {
              "$ref" : "#/components/schemas/UsageStats"
            },
            "date" : {
              "type" : "string"
            },
            "monthlyStats" : {
              "$ref" : "#/components/schemas/UsageStats"
            },
            "weeklyStats" : {
              "$ref" : "#/components/schemas/UsageStats"
            }
          }
        },
        "UsageStats" : {
          "required" : [ "count" ],
          "type" : "object",
          "properties" : {
            "count" : {
              "type" : "integer",
              "format" : "int32"
            },
            "percentileRank" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "User" : {
          "required" : [ "email", "href", "id", "name" ],
          "type" : "object",
          "properties" : {
            "authenticationMechanism" : {
              "$ref" : "#/components/schemas/AuthenticationMechanism"
            },
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "email" : {
              "maxLength" : 127,
              "minLength" : 6,
              "pattern" : "^\\S+@\\S+\\.\\S+$",
              "type" : "string"
            },
            "extension" : {
              "type" : "object"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "follows" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "inheritedRoles" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "isAdmin" : {
              "type" : "boolean"
            },
            "isBot" : {
              "type" : "boolean"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "owns" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "profile" : {
              "$ref" : "#/components/schemas/Profile"
            },
            "roles" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "teams" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "timezone" : {
              "type" : "string"
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "UserList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/User"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        },
        "Webhook" : {
          "required" : [ "endpoint", "eventFilters", "id", "name" ],
          "type" : "object",
          "properties" : {
            "batchSize" : {
              "type" : "integer",
              "format" : "int32"
            },
            "changeDescription" : {
              "$ref" : "#/components/schemas/ChangeDescription"
            },
            "deleted" : {
              "type" : "boolean"
            },
            "description" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "enabled" : {
              "type" : "boolean"
            },
            "endpoint" : {
              "type" : "string",
              "format" : "uri"
            },
            "eventFilters" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventFilter"
              }
            },
            "extension" : {
              "type" : "object"
            },
            "failureDetails" : {
              "$ref" : "#/components/schemas/FailureDetails"
            },
            "followers" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityReference"
              }
            },
            "fullyQualifiedName" : {
              "maxLength" : 256,
              "minLength" : 1,
              "type" : "string"
            },
            "href" : {
              "type" : "string",
              "format" : "uri"
            },
            "id" : {
              "type" : "string",
              "format" : "uuid"
            },
            "name" : {
              "maxLength" : 128,
              "minLength" : 1,
              "type" : "string"
            },
            "owner" : {
              "$ref" : "#/components/schemas/EntityReference"
            },
            "secretKey" : {
              "type" : "string"
            },
            "status" : {
              "type" : "string",
              "enum" : [ "disabled", "failed", "retryLimitReached", "awaitingRetry", "active" ]
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagLabel"
              }
            },
            "timeout" : {
              "type" : "integer",
              "format" : "int32"
            },
            "updatedAt" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedBy" : {
              "type" : "string"
            },
            "version" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "WebhookList" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Webhook"
              }
            },
            "paging" : {
              "$ref" : "#/components/schemas/Paging"
            }
          }
        }
      }
    }
  }